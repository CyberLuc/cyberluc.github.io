<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[CyberLuc's Blog]]></title>
  <link href="http://www.cyberluc29.tk/atom.xml" rel="self"/>
  <link href="http://www.cyberluc29.tk/"/>
  <updated>2014-04-22T15:20:19+08:00</updated>
  <id>http://www.cyberluc29.tk/</id>
  <author>
    <name><![CDATA[CyberLuc]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NYOJ-115-城市平乱]]></title>
    <link href="http://www.cyberluc29.tk/blog/2014/04/22/nyoj-115-cheng-shi-ping-luan-zui-duan-lu-jing/"/>
    <updated>2014-04-22T11:19:13+08:00</updated>
    <id>http://www.cyberluc29.tk/blog/2014/04/22/nyoj-115-cheng-shi-ping-luan-zui-duan-lu-jing</id>
    <content type="html"><![CDATA[<h3 id="section">城市平乱</h3>

<p>南将军统领着N个部队，这N个部队分别驻扎在N个不同的城市。</p>

<p>他在用这N个部队维护着M个城市的治安，这M个城市分别编号从1到M。</p>

<p>现在，小工军师告诉南将军，第K号城市发生了暴乱，南将军从各个部队都派遣了一个分队沿最近路去往暴乱城市平乱。</p>

<p>现在已知在任意两个城市之间的路行军所需的时间，你作为南将军麾下最厉害的程序员，请你编写一个程序来告诉南将军第一个分队到达叛乱城市所需的时间。</p>

<p><a href="http://acm.nyist.net/JudgeOnline/problem.php?pid=115">题目连接</a></p>

<!-- more -->

<h3 id="bfs">BFS</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>BFS  (4.115.bfs.cpp)</span> <a href="http://www.cyberluc29.tk/downloads/code/ACM/NYOJ/4.115.bfs.cpp">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class="line"><span class="cp">#include &lt;cstring&gt;</span>
</span><span class="line"><span class="cp">#include &lt;queue&gt;</span>
</span><span class="line"><span class="cp">#define INF 0x7FFFFFFF</span>
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line"><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">;</span>
</span><span class="line"><span class="kt">int</span> <span class="n">City</span><span class="p">[</span><span class="mi">1001</span><span class="p">][</span><span class="mi">1001</span><span class="p">],</span> <span class="n">troop</span><span class="p">[</span><span class="mi">101</span><span class="p">];</span>
</span><span class="line"><span class="kt">bool</span> <span class="n">vis</span><span class="p">[</span><span class="mi">1001</span><span class="p">];</span>
</span><span class="line"><span class="n">queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">que</span><span class="p">;</span>
</span><span class="line"><span class="kt">int</span> <span class="n">bfs</span><span class="p">(){</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">q</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">i</span><span class="p">;</span>
</span><span class="line">    <span class="n">memset</span><span class="p">(</span><span class="n">vis</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">vis</span><span class="p">));</span>
</span><span class="line">    <span class="n">vis</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class="line">    <span class="n">que</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">cur</span><span class="p">);</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">que</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
</span><span class="line">        <span class="n">cur</span> <span class="o">=</span> <span class="n">que</span><span class="p">.</span><span class="n">front</span><span class="p">();</span> <span class="n">que</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class="line">        <span class="c1">//printf(&quot;Checking %d.\n&quot;, cur);</span>
</span><span class="line">        <span class="n">time</span> <span class="o">=</span> <span class="n">City</span><span class="p">[</span><span class="n">cur</span><span class="p">][</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class="line">            <span class="k">if</span><span class="p">(</span><span class="n">City</span><span class="p">[</span><span class="n">cur</span><span class="p">][</span><span class="n">i</span><span class="p">]){</span>
</span><span class="line">                <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">vis</span><span class="p">[</span><span class="n">i</span><span class="p">]){</span>
</span><span class="line">                    <span class="n">City</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">time</span> <span class="o">+</span> <span class="n">City</span><span class="p">[</span><span class="n">cur</span><span class="p">][</span><span class="n">i</span><span class="p">];</span>
</span><span class="line">                    <span class="n">vis</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class="line">                    <span class="n">que</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">i</span><span class="p">);</span>
</span><span class="line">                <span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="n">time</span> <span class="o">+</span> <span class="n">City</span><span class="p">[</span><span class="n">cur</span><span class="p">][</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">City</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]){</span>
</span><span class="line">                    <span class="n">City</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">time</span> <span class="o">+</span> <span class="n">City</span><span class="p">[</span><span class="n">cur</span><span class="p">][</span><span class="n">i</span><span class="p">];</span>
</span><span class="line">                <span class="p">}</span>
</span><span class="line">                <span class="c1">//printf(&quot;\tAccessing %d-&gt;%d (%d).\n&quot;, cur, i, City[i][0]);</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">INF</span><span class="p">;</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">City</span><span class="p">[</span><span class="n">troop</span><span class="p">[</span><span class="n">i</span><span class="p">]][</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">        <span class="n">min</span> <span class="o">=</span> <span class="n">tmp</span> <span class="o">&lt;</span> <span class="n">min</span> <span class="o">?</span> <span class="n">tmp</span> <span class="o">:</span> <span class="n">min</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="n">min</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">k</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">t</span><span class="p">;</span>
</span><span class="line">    <span class="n">freopen</span><span class="p">(</span><span class="s">&quot;data.in&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
</span><span class="line">    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">k</span><span class="p">);</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span><span class="n">k</span><span class="o">--</span><span class="p">){</span>
</span><span class="line">        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d%d%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">p</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">q</span><span class="p">);</span>
</span><span class="line">        <span class="n">memset</span><span class="p">(</span><span class="n">troop</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">troop</span><span class="p">));</span>
</span><span class="line">        <span class="n">memset</span><span class="p">(</span><span class="n">City</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">City</span><span class="p">));</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">troop</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">p</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class="line">            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">);</span>
</span><span class="line">            <span class="n">City</span><span class="p">[</span><span class="n">b</span><span class="p">][</span><span class="n">a</span><span class="p">]</span> <span class="o">=</span> <span class="n">City</span><span class="p">[</span><span class="n">a</span><span class="p">][</span><span class="n">b</span><span class="p">]</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">bfs</span><span class="p">());</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="dijkstra">Dijkstra</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Dijkstra的Vector邻接表实现  (4.115.dijkstra.cpp)</span> <a href="http://www.cyberluc29.tk/downloads/code/ACM/NYOJ/4.115.dijkstra.cpp">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="cp">#include&lt;cstdio&gt;</span>
</span><span class="line"><span class="cp">#include&lt;cstring&gt;</span>
</span><span class="line"><span class="cp">#include&lt;vector&gt;</span>
</span><span class="line"><span class="cp">#define N 1001</span>
</span><span class="line"><span class="cp">#define INF 0x7FFFFFFF</span>
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line"><span class="k">struct</span> <span class="n">node</span><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">v</span><span class="p">,</span> <span class="n">w</span><span class="p">;</span>
</span><span class="line">    <span class="n">node</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">){</span>
</span><span class="line">        <span class="n">v</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span> <span class="n">w</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="n">vector</span><span class="o">&lt;</span><span class="n">node</span><span class="o">*&gt;</span> <span class="n">G</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
</span><span class="line"><span class="kt">int</span> <span class="n">dist</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">Army</span><span class="p">[</span><span class="mi">101</span><span class="p">];</span>
</span><span class="line"><span class="kt">bool</span> <span class="n">vis</span><span class="p">[</span><span class="n">N</span><span class="p">];</span>
</span><span class="line"><span class="kt">int</span> <span class="n">m</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="n">dijkstra</span><span class="p">(){</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">u</span><span class="p">,</span> <span class="n">w</span><span class="p">,</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">q</span><span class="p">;</span>
</span><span class="line">    <span class="n">dist</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">vis</span><span class="p">[</span><span class="n">cur</span><span class="p">]){</span>           <span class="c1">// 当还有节点没有被访问时</span>
</span><span class="line">        <span class="n">vis</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">G</span><span class="p">[</span><span class="n">cur</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span> <span class="c1">// 遍历cur节点的邻接点</span>
</span><span class="line">            <span class="n">u</span> <span class="o">=</span> <span class="n">G</span><span class="p">[</span><span class="n">cur</span><span class="p">][</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">v</span><span class="p">;</span>               <span class="c1">// 邻接点的节点号</span>
</span><span class="line">            <span class="n">w</span> <span class="o">=</span> <span class="n">G</span><span class="p">[</span><span class="n">cur</span><span class="p">][</span><span class="n">i</span><span class="p">]</span><span class="o">-&gt;</span><span class="n">w</span><span class="p">;</span>               <span class="c1">// 权重</span>
</span><span class="line">            <span class="k">if</span><span class="p">(</span><span class="n">dist</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span> <span class="o">+</span> <span class="n">w</span> <span class="o">&lt;</span> <span class="n">dist</span><span class="p">[</span><span class="n">u</span><span class="p">])</span>     <span class="c1">// 更新邻接点最短路径权值</span>
</span><span class="line">                <span class="n">dist</span><span class="p">[</span><span class="n">u</span><span class="p">]</span> <span class="o">=</span> <span class="n">dist</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span> <span class="o">+</span> <span class="n">w</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">min_cost</span> <span class="o">=</span> <span class="n">INF</span><span class="p">;</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span> <span class="c1">// 查找未访问的最短路径节点</span>
</span><span class="line">            <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">vis</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">dist</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">min_cost</span><span class="p">){</span>
</span><span class="line">                <span class="n">min_cost</span> <span class="o">=</span> <span class="n">dist</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class="line">                <span class="n">cur</span> <span class="o">=</span> <span class="n">i</span><span class="p">;</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">;</span>
</span><span class="line">    <span class="n">freopen</span><span class="p">(</span><span class="s">&quot;data.in&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
</span><span class="line">    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">k</span><span class="p">);</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span><span class="n">k</span><span class="o">--</span><span class="p">){</span>
</span><span class="line">        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d%d%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">p</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">q</span><span class="p">);</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span> <span class="c1">// 初始化</span>
</span><span class="line">            <span class="n">G</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">clear</span><span class="p">();</span>
</span><span class="line">            <span class="n">dist</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">INF</span><span class="p">;</span>
</span><span class="line">            <span class="n">vis</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">Army</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class="line">        <span class="k">while</span><span class="p">(</span><span class="n">p</span><span class="o">--</span><span class="p">){</span>
</span><span class="line">            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">c</span><span class="p">);</span>
</span><span class="line">            <span class="n">G</span><span class="p">[</span><span class="n">a</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="k">new</span> <span class="n">node</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="n">c</span><span class="p">));</span>
</span><span class="line">            <span class="n">G</span><span class="p">[</span><span class="n">b</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="k">new</span> <span class="n">node</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">c</span><span class="p">));</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">dijkstra</span><span class="p">();</span>
</span><span class="line">        <span class="kt">int</span> <span class="n">ans</span> <span class="o">=</span> <span class="n">INF</span><span class="p">;</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class="line">            <span class="k">if</span><span class="p">(</span><span class="n">ans</span> <span class="o">&gt;</span> <span class="n">dist</span><span class="p">[</span><span class="n">Army</span><span class="p">[</span><span class="n">i</span><span class="p">]])</span>
</span><span class="line">                <span class="n">ans</span> <span class="o">=</span> <span class="n">dist</span><span class="p">[</span><span class="n">Army</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">ans</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="bellman-ford">Bellman-Ford</h3>

<p>Bellman-Ford算法的介绍可以看<a href="http://wenku.baidu.com/link?url=zJJSMwhhM-Qof0hXwafd5jaQqKWIgVMbm1HQb5VRY6A8QBaHW0IPnIlBSoQYP4d1pe9vZEvMxjdj_eYzVcFi5VbEbn1eaTxRt0HHbPPmgUO">这里</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Bellman-Ford  (4.115.bellman-ford.cpp)</span> <a href="http://www.cyberluc29.tk/downloads/code/ACM/NYOJ/4.115.bellman-ford.cpp">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
<span class="line-number">68</span>
<span class="line-number">69</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="cp">#include&lt;cstdio&gt;</span>
</span><span class="line"><span class="cp">#include&lt;cstring&gt;</span>
</span><span class="line"><span class="cp">#include &lt;vector&gt;</span>
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="cp">#define INF 0x7FFFFFFF</span>
</span><span class="line"><span class="cp">#define N 1001</span>
</span><span class="line"><span class="cp">#define M 200001</span>
</span><span class="line"><span class="k">struct</span> <span class="n">node</span><span class="p">{</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">from</span><span class="p">,</span> <span class="n">to</span><span class="p">,</span> <span class="n">weight</span><span class="p">;</span>
</span><span class="line"><span class="p">};</span>
</span><span class="line"><span class="kt">int</span> <span class="n">dist</span><span class="p">[</span><span class="n">N</span><span class="p">],</span> <span class="n">Army</span><span class="p">[</span><span class="mi">101</span><span class="p">];</span>
</span><span class="line"><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">;</span>
</span><span class="line"><span class="n">vector</span><span class="o">&lt;</span><span class="n">node</span><span class="o">&gt;</span> <span class="n">G</span><span class="p">;</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="n">bellman</span><span class="p">(){</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">flag</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">temp</span><span class="p">;</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="n">dist</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">INF</span><span class="p">;</span>
</span><span class="line">    <span class="n">dist</span><span class="p">[</span><span class="n">q</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>    <span class="c1">// 遍历n-1次</span>
</span><span class="line">        <span class="n">flag</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">*</span><span class="n">p</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>     <span class="c1">// 遍历所有边</span>
</span><span class="line">            <span class="k">if</span><span class="p">(</span><span class="n">dist</span><span class="p">[</span><span class="n">G</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">from</span><span class="p">]</span> <span class="o">!=</span> <span class="n">INF</span><span class="p">){</span> <span class="c1">// 如果边存在</span>
</span><span class="line">                <span class="n">temp</span> <span class="o">=</span> <span class="n">dist</span><span class="p">[</span><span class="n">G</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">from</span><span class="p">]</span> <span class="o">+</span> <span class="n">G</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">weight</span><span class="p">;</span>
</span><span class="line">                <span class="c1">// 若第j条边的存在缩短了到G[j].to的最短路径</span>
</span><span class="line">                <span class="k">if</span><span class="p">(</span><span class="n">temp</span> <span class="o">&lt;</span> <span class="n">dist</span><span class="p">[</span><span class="n">G</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">to</span><span class="p">]){</span>
</span><span class="line">                    <span class="n">dist</span><span class="p">[</span><span class="n">G</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">to</span><span class="p">]</span> <span class="o">=</span> <span class="n">temp</span><span class="p">;</span>
</span><span class="line">                    <span class="n">flag</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class="line">                <span class="p">}</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">flag</span><span class="p">)</span> <span class="k">break</span><span class="p">;</span>        <span class="c1">//如果不松弛了，可以提前跳出循环</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="c1">// 本题不需要判断负权回路</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">k</span><span class="p">,</span> <span class="n">min</span><span class="p">;</span>
</span><span class="line">    <span class="n">freopen</span><span class="p">(</span><span class="s">&quot;data.in&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
</span><span class="line">    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">k</span><span class="p">);</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span><span class="n">k</span><span class="o">--</span><span class="p">){</span>
</span><span class="line">        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d%d%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">p</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">q</span><span class="p">);</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">Army</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class="line">        <span class="n">G</span><span class="p">.</span><span class="n">reserve</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="n">p</span><span class="p">);</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="o">*</span><span class="n">p</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">G</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">weight</span> <span class="o">=</span> <span class="n">INF</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">p</span> <span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">){</span>
</span><span class="line">            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">);</span>
</span><span class="line">            <span class="n">j</span> <span class="o">=</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">i</span><span class="p">;</span>           <span class="c1">// 无向边，存两次2*i,2*i-1</span>
</span><span class="line">            <span class="c1">// 为了便于Bellman-Ford进行遍历，直接将所有边依次存为数组</span>
</span><span class="line">            <span class="k">if</span><span class="p">(</span><span class="n">t</span> <span class="o">&lt;</span> <span class="n">G</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">weight</span><span class="p">){</span> <span class="c1">// 重边处理</span>
</span><span class="line">                <span class="c1">// 无向图</span>
</span><span class="line">                <span class="n">G</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">from</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
</span><span class="line">                <span class="n">G</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">to</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
</span><span class="line">                <span class="n">G</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">weight</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">                <span class="n">G</span><span class="p">[</span><span class="o">++</span><span class="n">j</span><span class="p">].</span><span class="n">from</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span>
</span><span class="line">                <span class="n">G</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">to</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
</span><span class="line">                <span class="n">G</span><span class="p">[</span><span class="n">j</span><span class="p">].</span><span class="n">weight</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">bellman</span><span class="p">();</span>
</span><span class="line">        <span class="n">min</span> <span class="o">=</span> <span class="n">INF</span><span class="p">;</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">            <span class="k">if</span><span class="p">(</span><span class="n">dist</span><span class="p">[</span><span class="n">Army</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span> <span class="o">&lt;</span> <span class="n">min</span><span class="p">)</span> <span class="n">min</span> <span class="o">=</span> <span class="n">dist</span><span class="p">[</span><span class="n">Army</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span><span class="n">min</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>POJ相关题目：</p>

<ul>
  <li><a href="http://poj.org/problem?id=1364">1364</a></li>
  <li><a href="http://poj.org/problem?id=1860">1860</a></li>
  <li><a href="http://poj.org/problem?id=3159">3159</a></li>
  <li><a href="http://poj.org/problem?id=1201">1201</a></li>
</ul>

<p><a href="http://www.cppblog.com/guyuecanhui/articles/80873.html?opt=admin">解题代码</a></p>

<h3 id="spfa">SPFA</h3>

<p>SPFA(Shortest Path Faster Algorithm)在Bellman-Ford算法的基础上加上一个队列优化，减少了冗余的松弛操作，非常高效。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>SPFA  (4.115.spfa.cpp)</span> <a href="http://www.cyberluc29.tk/downloads/code/ACM/NYOJ/4.115.spfa.cpp">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
<span class="line-number">58</span>
<span class="line-number">59</span>
<span class="line-number">60</span>
<span class="line-number">61</span>
<span class="line-number">62</span>
<span class="line-number">63</span>
<span class="line-number">64</span>
<span class="line-number">65</span>
<span class="line-number">66</span>
<span class="line-number">67</span>
</pre></td><td class="code"><pre><code class="c++"><span class="line"><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class="line"><span class="cp">#include &lt;vector&gt;</span>
</span><span class="line"><span class="cp">#include &lt;queue&gt;</span>
</span><span class="line"><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class="line"><span class="cp">#define INF 0x7FFFFFFF</span>
</span><span class="line"><span class="cp">#define MAXN 1001</span>
</span><span class="line"><span class="k">struct</span> <span class="n">node</span><span class="p">{</span> <span class="kt">int</span> <span class="n">to</span><span class="p">,</span> <span class="n">weight</span><span class="p">;</span> <span class="p">};</span>
</span><span class="line"><span class="kt">int</span> <span class="n">n</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">;</span>
</span><span class="line"><span class="kt">int</span> <span class="n">Army</span><span class="p">[</span><span class="n">MAXN</span><span class="p">],</span> <span class="n">dist</span><span class="p">[</span><span class="n">MAXN</span><span class="p">];</span>
</span><span class="line"><span class="kt">bool</span> <span class="n">inQueue</span><span class="p">[</span><span class="n">MAXN</span><span class="p">];</span>
</span><span class="line"><span class="n">vector</span><span class="o">&lt;</span><span class="n">node</span><span class="o">&gt;</span> <span class="n">G</span><span class="p">[</span><span class="n">MAXN</span><span class="p">];</span>
</span><span class="line">
</span><span class="line"><span class="kt">void</span> <span class="n">SPFA</span><span class="p">(){</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">cur</span> <span class="o">=</span> <span class="n">q</span><span class="p">,</span> <span class="n">v</span><span class="p">,</span> <span class="n">cur2v</span><span class="p">;</span>
</span><span class="line">    <span class="n">queue</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">que</span><span class="p">;</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class="line">        <span class="n">dist</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">INF</span><span class="p">;</span>
</span><span class="line">        <span class="n">inQueue</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">dist</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line">    <span class="n">que</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">cur</span><span class="p">);</span>
</span><span class="line">    <span class="n">inQueue</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span><span class="line">
</span><span class="line">    <span class="k">while</span><span class="p">(</span><span class="o">!</span><span class="n">que</span><span class="p">.</span><span class="n">empty</span><span class="p">()){</span>
</span><span class="line">        <span class="n">cur</span> <span class="o">=</span> <span class="n">que</span><span class="p">.</span><span class="n">front</span><span class="p">();</span>
</span><span class="line">        <span class="n">que</span><span class="p">.</span><span class="n">pop</span><span class="p">();</span>
</span><span class="line">        <span class="n">inQueue</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">G</span><span class="p">[</span><span class="n">cur</span><span class="p">].</span><span class="n">size</span><span class="p">();</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class="line">            <span class="n">v</span> <span class="o">=</span> <span class="n">G</span><span class="p">[</span><span class="n">cur</span><span class="p">][</span><span class="n">i</span><span class="p">].</span><span class="n">to</span><span class="p">;</span>
</span><span class="line">            <span class="n">cur2v</span> <span class="o">=</span> <span class="n">G</span><span class="p">[</span><span class="n">cur</span><span class="p">][</span><span class="n">i</span><span class="p">].</span><span class="n">weight</span><span class="p">;</span>
</span><span class="line">            <span class="k">if</span><span class="p">(</span><span class="n">dist</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span> <span class="o">+</span> <span class="n">cur2v</span> <span class="o">&lt;</span> <span class="n">dist</span><span class="p">[</span><span class="n">v</span><span class="p">]){</span>
</span><span class="line">                <span class="n">dist</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="n">dist</span><span class="p">[</span><span class="n">cur</span><span class="p">]</span> <span class="o">+</span> <span class="n">cur2v</span><span class="p">;</span>
</span><span class="line">                <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="n">inQueue</span><span class="p">[</span><span class="n">v</span><span class="p">]){</span>
</span><span class="line">                    <span class="n">que</span><span class="p">.</span><span class="n">push</span><span class="p">(</span><span class="n">v</span><span class="p">);</span>
</span><span class="line">                    <span class="n">inQueue</span><span class="p">[</span><span class="n">v</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">                <span class="p">}</span>
</span><span class="line">            <span class="p">}</span>
</span><span class="line">        <span class="p">}</span> <span class="c1">// for</span>
</span><span class="line">    <span class="p">}</span> <span class="c1">// while</span>
</span><span class="line"><span class="p">}</span> <span class="c1">// void SPFA()</span>
</span><span class="line">
</span><span class="line"><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">k</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">,</span> <span class="n">t</span><span class="p">;</span>
</span><span class="line">    <span class="n">freopen</span><span class="p">(</span><span class="s">&quot;data.in&quot;</span><span class="p">,</span> <span class="s">&quot;r&quot;</span><span class="p">,</span> <span class="n">stdin</span><span class="p">);</span>
</span><span class="line">    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">k</span><span class="p">);</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span><span class="n">k</span><span class="o">--</span><span class="p">){</span>
</span><span class="line">        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d%d%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">n</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">m</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">p</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">q</span><span class="p">);</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">Army</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="n">G</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">clear</span><span class="p">();</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">p</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class="line">            <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d%d%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">a</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">b</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">t</span><span class="p">);</span>
</span><span class="line">            <span class="n">node</span> <span class="n">tmp</span><span class="p">;</span>
</span><span class="line">            <span class="n">tmp</span><span class="p">.</span><span class="n">to</span> <span class="o">=</span> <span class="n">b</span><span class="p">;</span> <span class="n">tmp</span><span class="p">.</span><span class="n">weight</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
</span><span class="line">            <span class="n">G</span><span class="p">[</span><span class="n">a</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">tmp</span><span class="p">);</span>
</span><span class="line">            <span class="n">tmp</span><span class="p">.</span><span class="n">to</span> <span class="o">=</span> <span class="n">a</span><span class="p">;</span>
</span><span class="line">            <span class="n">G</span><span class="p">[</span><span class="n">b</span><span class="p">].</span><span class="n">push_back</span><span class="p">(</span><span class="n">tmp</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">SPFA</span><span class="p">();</span>
</span><span class="line">
</span><span class="line">        <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="n">INF</span><span class="p">;</span>
</span><span class="line">        <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class="line">            <span class="k">if</span><span class="p">(</span><span class="n">dist</span><span class="p">[</span><span class="n">Army</span><span class="p">[</span><span class="n">i</span><span class="p">]]</span><span class="o">&lt;</span><span class="n">min</span><span class="p">)</span> <span class="n">min</span> <span class="o">=</span> <span class="n">dist</span><span class="p">[</span><span class="n">Army</span><span class="p">[</span><span class="n">i</span><span class="p">]];</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">min</span><span class="p">);</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ACM题型模板总结]]></title>
    <link href="http://www.cyberluc29.tk/blog/2014/04/19/acm-problem-type-summary/"/>
    <updated>2014-04-19T20:06:30+08:00</updated>
    <id>http://www.cyberluc29.tk/blog/2014/04/19/acm-problem-type-summary</id>
    <content type="html"><![CDATA[<h2 id="section">题目题型总结</h2>

<ol>
  <li>解题策略
    <ul>
      <li>动态规划
        <ul>
          <li>双线程DP</li>
          <li>背包问题</li>
          <li>区间问题</li>
        </ul>
      </li>
      <li>贪心
        <ul>
          <li>枚举</li>
          <li>二分</li>
        </ul>
      </li>
      <li>模拟
        <ul>
          <li>过河问题</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>数据结构
    <ul>
      <li>队列
        <ul>
          <li>优先级队列
            <ul>
              <li>STL</li>
              <li>二叉堆实现</li>
            </ul>
          </li>
          <li>双向队列</li>
        </ul>
      </li>
      <li>栈
        <ul>
          <li>STL</li>
        </ul>
      </li>
      <li>堆
        <ul>
          <li>STL</li>
          <li>堆排序</li>
        </ul>
      </li>
      <li>树
        <ul>
          <li>线段树</li>
          <li>字典树</li>
          <li>搜索树</li>
          <li>表达式树</li>
          <li>并查集</li>
          <li>树状数组</li>
        </ul>
      </li>
    </ul>
  </li>
  <li>查找
    <ul>
      <li>二分查找</li>
      <li>哈希表</li>
      <li>STL map</li>
    </ul>
  </li>
  <li>图论
    <ul>
      <li>图的表示
        <ul>
          <li>邻接表</li>
          <li>邻接矩阵</li>
          <li>十字链表</li>
        </ul>
      </li>
      <li>图的遍历
        <ul>
          <li>DFS</li>
          <li>BFS</li>
        </ul>
      </li>
      <li>
        <p>哈密顿路与欧拉路</p>
      </li>
      <li>最短路径
        <ul>
          <li>Dijkstra</li>
          <li>Floyd</li>
          <li>Bellman-Ford</li>
          <li>SPFA</li>
        </ul>
      </li>
      <li>连通性
        <ul>
          <li>强连通分量
            <ul>
              <li>Tarjan</li>
              <li>缩点</li>
              <li>双连通分量</li>
            </ul>
          </li>
          <li>割点</li>
          <li>桥</li>
        </ul>
      </li>
      <li>最小生成树
        <ul>
          <li>Prim</li>
          <li>Kruskal</li>
          <li>次小生成树</li>
        </ul>
      </li>
      <li>二分图匹配
        <ul>
          <li>最大匹配
            <ul>
              <li>Hungary</li>
              <li>Hungary的Vector邻接表实现（简单、更快）</li>
              <li>Hopcroft-Carp</li>
            </ul>
          </li>
          <li>最大权匹配</li>
          <li>稳定婚姻问题</li>
        </ul>
      </li>
      <li>网络流
        <ul>
          <li>最大流</li>
          <li>费用流</li>
        </ul>
      </li>
      <li>关键路径</li>
    </ul>
  </li>
  <li>排序算法
    <ul>
      <li>堆排序</li>
      <li>桶排序</li>
      <li>希尔排序</li>
      <li>快速排序</li>
    </ul>
  </li>
  <li>数学
    <ul>
      <li>代数</li>
      <li>组合学</li>
      <li>博弈论</li>
      <li>数论</li>
      <li>计算几何</li>
    </ul>
  </li>
</ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Algorithms - Week 2 - Note]]></title>
    <link href="http://www.cyberluc29.tk/blog/2013/08/07/algo-004-note-week-2/"/>
    <updated>2013-08-07T21:03:00+08:00</updated>
    <id>http://www.cyberluc29.tk/blog/2013/08/07/algo-004-note-week-2</id>
    <content type="html"><![CDATA[<h2 id="master-method">一、Master Method</h2>
<p>前面对算法进行了一定程度的分析，这里要祭出一个分析利器：<code>Master Method</code>。</p>

<p>利用<code>Master Method</code>，可以快速、准确地判断D&amp;C类算法的时间复杂度，不过它的应用也有限制，比如只能用在划分的子问题大小相等的情况下。下面就来详细看看<code>Master Method</code>：</p>

<!-- more -->

<p>首先设：</p>

<script type="math/tex; mode=display">
\begin{equation}
\begin{aligned}
T(n)=aT(\frac{n}{b})+O(n^d)
\end{aligned}
\end{equation}
</script>

<p>然后就能够根据a、b、d的值得到如下式子：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{equation}
\begin{aligned}
T(n)=
\begin{cases}
O(n^dlogn) &(a=b^d)\\
O(n^d) &(a<b^d)\\
O(n^{log_ba}) &(a>b^d)
\end{cases}
\end{aligned}
\end{equation}
 %]]&gt;</script>

<p>这其中，$a$是每次<code>Divide</code>时划分出的子问题数量，$b$是每次<code>Divide</code>时子问题相对原问题的大小的倒数，<code>d</code>是递归之外的操作的幂。</p>

<p>现在，根据$a$与$b^d$的关系，我们就能够利用<code>Master Method</code>来进行算法分析了。</p>

<p>首先来看看<code>Merge Sort</code>，它每次将数组划分为两个原大小二分之一的子数组，所以$a=b=2$，此外可知$d=1$。
所以$2=2^1$，即$a=b^d$。显然，$T(n)=O(nlog_2n)$。</p>

<p>对于<code>Karatsuba Multiplication</code>而言，$a=3，b=2，d=0$，所以$T(n)=O(n^{log_23})$。</p>

<p>对于<code>Binary Search</code>而言，$a=1，b=2，d=0$，所以$T(n)=O(n^0log<em>2n)=O(log</em>2n)$。</p>

<h3 id="proof---">Proof - 证明</h3>
<p>把上面的三种情况给记住就能应付相当一部分的分析了，不过为了更深入的理解<code>Master Method</code>，我们看看这三种情况是怎么来的。</p>

<p>首先我们把$T(n)$改写一下：</p>

<script type="math/tex; mode=display">
\begin{equation}
\begin{aligned}
T(n)=aT(\frac{n}{b})+cn^d
\end{aligned}
\end{equation}
</script>

<p>前面对<code>Merge Sort</code>的分析时已经提到了在<code>Recursion Tree</code>中每一层的节点数与子问题大小以及树的深度的问题，将$2$等数字用对应的字母替换，得到<code>第j层节点数</code>$a^j$，<code>第j层子问题大小</code>为$\frac{n}{b^j}$，<code>树的深度</code>也就是层数为$log_bn+1$。</p>

<p>那么可以得到<code>第j层的操作量</code>$ a^j \times c(\frac{n}{b^j})^d=cn^d\times (\frac{a}{b^d})^j$。</p>

<p>将每一层的操作量加起来，得到<code>总的操作量</code>$cn^d \sum_{j=0}^{log_bn}{(\frac{a}{b^d})^j}$。</p>

<p>很明显，可以看出这个式子右边部分是一个<code>等比数列</code>，公比就为$\frac{a}{b^d}$，而它的大小对于原式的大小有很大的影响。</p>

<p>Tim教授提到：</p>

<p>$a$ = <code>Rate of Subproblem Proliferation - (RSP)</code>，也就是<code>子问题的增长率</code>，这个数越大当然算法就运行得越慢。</p>

<p>$b^d$ = <code>Rate of Work Shrinkage - (RWS)</code>，也就是<code>操作量的收缩率</code>，这个数当然越大越好了。至于为什么这个数是$b^d$而不是$b$，原因是仅知道$b$的大小在这里对于我们用处不大，我们真正需要的不是子问题大小的收缩率，而是解决子问题所需进行的递归操作之外的操作量的收缩率。对于<code>Merge Sort</code>而言，$b=2，d=1$，所以子问题的收缩率为$\frac{1}{2}$，解决子问题的操作量的收缩率也为$\frac{1}{2}$。而假如$b=2，d=2$，那么每次divide后的子问题只有原本的$\frac{1}{2}$大小，而需要进行的操作量为原本的$\frac{1}{4}$。</p>

<p>所以，公比$\frac{a}{b^d}$就是<code>子问题增长率（RSP）</code>与<code>解决子问题所需操作量的收缩率（RWS）</code>的比值。如果比值<code>大于1</code>，那么增长率大于收缩率，<code>Recursion Tree</code>每一级所需要的操作量处于递增状态；如果比值<code>等于1</code>，那么每一级所要的操作量不变；而如果比值<code>小于1</code>，每一级所需要的操作量处于递减状态。</p>

<p>首先来看第一种情况，<code>RSP=RWS</code>，即$a=b^d$。此时<code>Recursion Tree</code>各级操作量不变。原式右半部分等比数列的和显然为$log_bn+1$，所以原式等于$cn^d(log_bn+1)$，即为$O(n^dlog<em>2n)$。注意，无论$log_bn$中$b$为多少，它始终为$clog</em>2n=Θ(log_2n)$，使用换底公式即可推得。</p>

<p>第二种情况，<code>RSP&lt;RWS</code>，即$a&lt;b^d$。此时<code>Recursion Tree</code>各级操作量递减。对于原式右边的等比数列，因为a、b、d是与n无关的常数，且$\frac{a}{b^d}&lt;1$，由求和公式可得：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{equation}
\begin{aligned}
\sum_{j=0}^{log_bn}{(\frac{a}{b^d})^j}&=\frac{1-{\frac{a}{b^d}}^{log_bn+1}}{1-\frac{a}{b^d}}\\
& \leqslant \frac{1}{1-\frac{a}{b^d}}
\end{aligned}
\end{equation}
 %]]&gt;</script>

<p>等比数列和小于等于一个常数，所以时间复杂度为$O(cn^d\times \frac{1}{1-\frac{a}{b^d}})=O(n^d)$。在整个递归调用的过程中，根一级的操作数量最大，为$cn^d$，因为各级操作量呈等比递减，其它各级相加无非是增加了$cn^d$的常数项系数，即为$O(n^d)$。</p>

<p>第三种情况，<code>RSP&gt;RWS</code>，即$a&gt;b^d$。此时<code>Recursion Tree</code>各级操作量递增。对于原式右边的等比数列，因为a、b、d是与n无关的常数，且$\frac{a}{b^d}&gt;1$，由求和公式可得：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{equation}
\begin{aligned}
\sum_{j=0}^{log_bn}{(\frac{a}{b^d})^j}&=\frac{ {\frac{a}{b^d}}^{log_bn+1}-1}{\frac{a}{b^d}-1}\\
& \leqslant \frac{ {\frac{a}{b^d}}^{log_bn+1}}{\frac{a}{b^d}-1}\\
& = {\frac{a}{b^d}}^{log_bn}\times \frac{\frac{a}{b^d}}{\frac{a}{b^d}-1}\\

∵\frac{\frac{a}{b^d}}{\frac{a}{b^d}-1}为常数\\
∴O(cn^d \sum_{j=0}^{log_bn}{(\frac{a}{b^d})^j})&=O(n^d\times {\frac{a}{b^d}}^{log_bn})\\
&=O(n^d \times \frac{n^{log_ba}}{n^d})\\
&=O(n^{log_ba})
\end{aligned}
\end{equation}
 %]]&gt;</script>

<p>这种情况下，在整个递归调用的过程中，叶子一级的操作量最大，因为各级操作量呈等比递增，其它各级相加也无非是增加了叶子节点操作量的常数项系数。又因为每个叶子节点的操作量为常数$c$，所以时间复杂度为$O(c\times叶子节点数)=O(a^{log_bn})=O(n^{log_ba})$。</p>

<p>了解了上面的过程后，我们就可以方便地使用<code>Master Method</code>来分析算法的复杂度了～</p>

<h2 id="quick-sort---">二、Quick Sort - 快速排序</h2>
<p>快速排序是在实际情况中较常使用的一种排序算法，在C++的STL中就提供了qsort函数。不过我们还是来看看快速排序算法究竟是如何实现的。</p>

<p><code>Quick Sort</code>算法同样采用了D&amp;C的设计思路，不过它的排序方法相较<code>Merge Sort</code>来说更为奇特。在<code>Worst Case</code>下，快速排序算法的算法时间复杂度为$Θ(n^2)$，而在<code>Best Case</code>下为$Θ(n)$，平均复杂度为$Θ(nlog<em>2n)$。虽然它的平均运行时间才为$Θ(nlog</em>2n)$，而归并排序的<code>Worst Case</code>下运行时间就为$Θ(nlog_2n)$，但是快排在实际中一般仍然优于归并，这是因为算法时间复杂度并不能直接代表算法运行的快慢——只能表示运行时间增长的速度而已，毕竟常数项系数已经被隐去了。而快排在排序中是<code>In-Place</code>的，不需要额外建立数组并且复制回原数组，所以它的常数项系数要比归并小，总的来说仍然比归并快。</p>

<h3 id="section">算法实现</h3>
<p>快速排序算法的思路也很清晰，如下：</p>

<p><strong><em>Divide：</em></strong>选定<code>pivot</code>，将比<code>pivot</code>小的元素排列在<code>pivot</code>左边，比<code>pivot</code>大的元素排列在其右边。</p>

<p><strong><em>Conquer：</em></strong>对于不包含<code>pivot</code>的左右两个数组分别递归地调用自身解决问题。</p>

<p><strong><em>Combine：</em></strong>很幸运，这一步可以省略掉，因为此时原数组已经排好序了。</p>

<p>下面给出具体的C语言实现代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Quick Sort.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="kt">int</span> <span class="o">*</span><span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="o">*</span><span class="n">b</span><span class="p">){</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">t</span> <span class="o">=</span> <span class="o">*</span><span class="n">a</span><span class="p">;</span>
</span><span class="line">    <span class="o">*</span><span class="n">a</span> <span class="o">=</span> <span class="o">*</span><span class="n">b</span><span class="p">;</span>
</span><span class="line">    <span class="o">*</span><span class="n">b</span> <span class="o">=</span> <span class="n">t</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">partition</span><span class="p">(</span><span class="kt">int</span> <span class="n">A</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">left</span><span class="p">,</span> <span class="kt">int</span> <span class="n">right</span><span class="p">){</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">pivot</span><span class="p">;</span>
</span><span class="line">    <span class="n">pivot</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">left</span><span class="p">];</span>          <span class="cm">/* 选择数组第一个元素作为pivot */</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">=</span> <span class="n">left</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>  <span class="cm">/* i指向当前元素，j指向大于pivot的第一个元素 */</span>
</span><span class="line">        <span class="k">if</span><span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">pivot</span><span class="p">){</span>
</span><span class="line">            <span class="n">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">]);</span> <span class="cm">/* 若当前元素小于pivot，则将其与大于pivot的第一个元素交换 */</span>
</span><span class="line">            <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">swap</span><span class="p">(</span><span class="o">&amp;</span><span class="n">A</span><span class="p">[</span><span class="n">left</span><span class="p">],</span> <span class="o">&amp;</span><span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]);</span> <span class="cm">/* 将pivot放到合适的位置 */</span>
</span><span class="line">    <span class="k">return</span> <span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">quickSort</span><span class="p">(</span><span class="kt">int</span> <span class="n">A</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">left</span><span class="p">,</span> <span class="kt">int</span> <span class="n">right</span><span class="p">){</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">left</span> <span class="o">&gt;=</span> <span class="n">right</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">pivot</span> <span class="o">=</span> <span class="n">partition</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">right</span><span class="p">);</span>
</span><span class="line">    <span class="n">quickSort</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">left</span><span class="p">,</span> <span class="n">pivot</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
</span><span class="line">    <span class="n">quickSort</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">pivot</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="n">right</span><span class="p">);</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-1">算法分析</h3>
<p>由上面的算法描述可知，每一次partition时，都将选定的pivot排到了正确的位置，并进一步缩小待排序的数组大小，减少可能的比较次数。</p>

<p>快速排序的运行时间取决于partition的步骤时分出的左右两个数组是否平衡。分析时的情况时选取pivot为数组第一个元素。</p>

<h4 id="worst-case">Worst Case</h4>
<p><code>Worst Case</code>是快速排序算法Partition时最不平衡的一种情况，在这种情况下，每次partition都将现有n个元素的数组分为大小为0和n-1的两个数组，于是这个算法的运行时间递推式就和线性搜索的递归实现的分析类似了，不同的是快速排序算法每一次partition是线性复杂度。所以可以得到：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{equation}
\begin{aligned}
T(n)&=T(n-1)+T(0)+Θ(n)\\
&=T(n-1)+Θ(n)\\
&=Θ(n^2)
\end{aligned}
\end{equation}
 %]]&gt;</script>

<p>这个时候数组的元素为已经排好序的状态，不过进一步可以验证得到，无论输入数组是正向排好序还是逆向排好序，快速排序的运行时间均为$Θ(n^2)$，这一点和插入排序等算法存在差异，后者此时对于按要求排好序的数组的运行时间反而仅为$Θ(n)$。所以，当需要排序的元素已经一定程度上排好序的时候，选择快排还需谨慎啊。</p>

<h4 id="best-case">Best Case</h4>
<p>最为理想的平衡情况就是每次pivot都选取到中间大小的元素，所以每一次partition都将数组分为两个近似$\frac{n}{2}$大小的子数组（要排除pivot这个元素）。我们忽略一些细节，可以得到：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{equation}
\begin{aligned}
T(n)&=2T(\frac{n}{2})+Θ(n)\\
&=Θ(nlog_2n)
\end{aligned}
\end{equation}
 %]]&gt;</script>

<h4 id="balenced-partitioning">Balenced Partitioning</h4>
<p>如果不按照$1:1$的比例划分数组而是按照其它的比例划分，那么partition还是平衡的吗？</p>

<p>下面假设每次partition将数组划分为$\frac{1}{10}$和$\frac{9}{10}$的两个部分，我们可以得到递推式：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{equation}
\begin{aligned}
T(n)&=T(\frac{9n}{10})+T(\frac{n}{10})+cn
\end{aligned}
\end{equation}
 %]]&gt;</script>

<p>粗看上去是一个极不平衡的划分，不过我们可以来仔细的看一下，用<code>Recursion Tree</code>进行分析。因为每次将数组划分为9:1的比例，所以划分为$\frac{1}{10}$的数组肯定比另一部分要先到达叶子部分，此时每一层的消耗均为cn，从这一层开始，因为不再是满二叉树了，每一层节点数减少，所以每一层的消耗已经小于cn，综合起来每一层消耗即$O(n)$。</p>

<p>所以Recursion Tree的<code>Minimum Depth</code>为$log<em>{10}n=Θ(log</em>2n)$。</p>

<p>而<code>Maximum Depth</code>则为$log<em>{\frac{10}{9}}n=Θ(log</em>2n)$。</p>

<p>综上可得，$T(n)=O(nlog_2n)$，可见这仍旧是一个平衡的划分。</p>

<p>我们将其一般化，假设常数$0&lt;α\leqslant\frac{1}{2}$作为左子数组的划分大小，那么右子数组则划分为$1-α$，可得：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{equation}
\begin{aligned}
T(n)&=T(αn)+T((1-α)n)+cn
\end{aligned}
\end{equation}
 %]]&gt;</script>

<p><code>Minimum Depth</code>为：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{equation}
\begin{aligned}
log_{\frac{1}{α}}n&=\frac{log_2n}{log_2{\frac{1}{α}}}\\
&=Θ(log_2n)
\end{aligned}
\end{equation}
 %]]&gt;</script>

<p><code>Maximum Depth</code>则为：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{equation}
\begin{aligned}
log_{\frac{1}{1-α}}n&=\frac{log_2n}{log_2{\frac{1}{1-α}}}\\
&=Θ(log_2n)
\end{aligned}
\end{equation}
 %]]&gt;</script>

<p>可知每层的消耗还是不变，仍旧为$O(n)$，所以这几个量没有任何变化，$T(n)$仍旧为$O(nlog_2n)$。</p>

<p>所以，无关划分的大小，只要每一次partition时进行的划分是<code>固定比例</code>的，运行时间总是$O(nlog_2n)$，只是被Big-Oh隐藏住的常数项系数可能会大一点。</p>

<h3 id="random-pivots">Random Pivots</h3>
<p>上面分析了各种比例下的时间复杂度，不过在实际的情况中几乎不可能每一次partition都是固定比例。为了使算法的复杂度充分靠近$(nlog_2n)$，我们采用随机的方法选取pivot。</p>

<h2 id="correctness-of-quick-sort">Correctness of Quick Sort</h2>
<p>前面我们已经学习了归并和快速排序算法，通常情况下从算法的实现原理与步骤上我们就能看出算法可以正确无误地运行，事实上这两个算法也确实如此。不过这两个算法到底为什么是正确的呢？如果严谨一点儿的话，就不能仅仅凭借直觉来判断算法正确与否了，所以<code>Professor Tim</code>介绍了使用归纳法来进行正确性证明的方法。</p>

<p>数学归纳法可以概括为以下三步：</p>

<blockquote>
  <p>(1)归纳奠基：证明n=1时命题成立；</p>

  <p>(2)归纳假设：假设n=k时命题成立；</p>

  <p>(3)归纳递推：由归纳假设推出n=k+1时命题也成立。</p>
</blockquote>

<p>当用它来进行算法正确性证明的时候，也是采用类似的步骤，但是稍有不同。</p>

<p>设$p(n)$为<code>快速排序算法能够正确排序大小为n的数组</code>。</p>

<p>为了证明$p(n)$对于所有的$n\geqslant 1$都成立，我们进行以下两个步骤：</p>

<p><strong><em>Base Case：</em></strong>证明$p(1)$为真，这一步很容易，大小为1的数组当然是排好序的。</p>

<p><strong><em>Inductive Step：</em></strong>对于$所有n\geqslant2$，证明：如果对于$任意k&lt;n，p(k)$均成立，那么$p(n)$也成立。</p>

<p>当这两个步骤完成后，算法的正确性自然就证明了。这也就是一步一步地递推，从2一直推到n，自然就把p(n)给证明了。</p>

<p>因为<code>Quick Sort</code>的实质是用partition对数组进行划分，每次将数组划分为左右两个数组，因为<code>pivot</code>元素不被包括在其中，所以两个数组的大小都严格小于n。由<code>Inductive Hypothesis</code>（$p(k)对于所有k&lt;n$均成立）可得，划分的两个子数组都能够被正确排列，继而整个数组处于排好序的状态。还可以继续对这两个子数组进行归纳证明，直到<code>base case</code>。不过根据<code>Inductive Hypothesis</code>，<code>Quick Sort</code>的正确性已经被证明了。</p>

<h3 id="loop-invariant---">Loop Invariant - 循环不变式</h3>
<p>在CLRS中还提出了<strong>Loop Invariant</strong>的概念，从数学上对算法中循环的正确性进行证明。</p>

<p><strong>Loop Invariant</strong>是数学归纳法的一种变体，它和数学归纳法几乎完全相同，都是先证明一个初始条件为真，然后逐条递推，唯一的区别在于数学归纳法是将归纳步骤无限进行下去，证明了第n步再继续证明第n+1步，而Loop Invariant则是要在某一步停止，也就是当完成了循环的条件时。</p>

<p>书中列出了应用Loop Invariant的三个步骤：</p>

<blockquote>
  <p><strong>Initialization</strong>: It is true prior to the first iteration of the loop.</p>

  <p><strong>Maintenance</strong>: If it is true before an iteration of the loop, it remains true before the next iteration.</p>

  <p><strong>Termination</strong>: When the loop terminates, the invariant gives us a useful property that hepls show that the algorithm is correct.</p>
</blockquote>

<p>然后这里就用循环不变式对上面提到的Insertion Sort进行检验。</p>

<p><strong>Initializaton：</strong>首先，循环的初始条件是<code>i=2</code>，这个时候i指向数组中第2个元素，此时数组<code>A[1...i-1]</code>也就是<code>A[1]</code>仅包含1个元素，所以trivially，这一个元素的数组肯定是排好序的。</p>

<p><strong>Maintenance：</strong>接着，<code>i=2</code>，循环进行第一次iteration。在进行这次循环之前，算法肯定是已经正确排序了<code>A[1]</code>。而注意每次的循环都是从选定的位置开始向左遍历，依次把比它小的牌右移一位，直到找到自己合适的位置。所以第1次循环结束后，数组的前两个元素<code>A[1...2]</code>处于排好序的状态。以此递推，可知第i次循环开始前，<code>A[1...i-1]</code>处于排好序的状态，而当次循环结束以后，第i个数已经被放到了正确的位置，数组<code>A[1...i]</code>无疑包含了已经正确排序的数组，而<code>A[i+1...num]</code>仍旧处于未排序状态。</p>

<p><strong>Termination：</strong>最后就是循环结束了。当循环结束时<code>i=num+1</code>，此时<code>A[1...i-1]</code>就是<code>A[1...num]</code>，也就是整个数组，可知是处于排好序的状态。</p>

<p>至此，就用类似数学归纳法的Loop Invariant将完全由循环构成的Insertion Sort的算法正确性给证明了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Algorithms - Week 1 - Note]]></title>
    <link href="http://www.cyberluc29.tk/blog/2013/08/07/algo-004-note-week-1/"/>
    <updated>2013-08-07T21:03:00+08:00</updated>
    <id>http://www.cyberluc29.tk/blog/2013/08/07/algo-004-note-week-1</id>
    <content type="html"><![CDATA[<h2 id="section">零、写在算法学习之前</h2>
<p>可能对于一名普通的软件编程人员，对于算法的深入学习不是一件特别必要的事情。不过要是想要提升自己，更深程度的理解计算机的世界，那么算法的学习是必不可少的。作为一名计算机科学与技术的本科生，我以后并不准备当一名算法专家，冗长的数学证明也并不合我口味，不过这并不妨碍我深入了解一下算法分析的应用，这无疑会给我能力的提升带来莫大的好处。</p>

<p><code>《Algorithms: Design and Analysis, Part 1》</code>第一周的课程里边有一句话是Professor Tim想要我们记住的：<strong><em>“Can we do better?”</em></strong>，在学习的过程中我们要时刻回想这句话，我们已经做得够好了吗？还能更好吗？</p>

<p>另外，实在想吐槽<code>Professor Tim</code>的用词和语速，还有那糟糕的板书——写的还没我好呢～</p>

<!-- more -->

<h2 id="section-1">一、算法分析基本符号</h2>

<h3 id="big-oh-notation">Big-Oh Notation</h3>
<p>$T(n)=O(f(n))$</p>

<p>数学定义：$T(n)=O(f(n))$当且仅当存在一个正常数$c$以及正整数$n<em>0$，使得对于任意$n&gt;n</em>0$，总有$T(n)\leqslant cf(n)$</p>

<p>意思是无关于函数在某个具体的点的值（因为$c$可以任意取值），只要$n$足够大，$cf(n)$的值总不会比$T(n)$小，此时$cf(n)$是$T(n)$函数的上界，$T(n)$的值无法超过它。$n_0$的值即为$T(n)=cf(n)$的那个临界点。</p>

<p>也就是说f(n)的增长率大于或等于T(n)，而非某一具体值高于T(n)。</p>

<h3 id="omega-notation">Omega Notation</h3>
<p>$T(n)=Ω(f(n))$</p>

<p>数学定义：$T(n)=Ω(f(n))$当且仅当存在一个正常数$c$以及正整数$n<em>0$，使得对于任意$n&gt;n</em>0$，总有$T(n)\geqslant cf(n)$</p>

<p>即，只要$n$足够大，$T(n)$总会大于或等于$cf(n)$，此时$cf(n)$是它的下界。同样，$n_0$是临界点。</p>

<p>也就是说T(n)的增长率大于或等于f(n)。</p>

<h3 id="theta-notation">Theta Notation</h3>
<p>$T(n)=Θ(f(n))$</p>

<p>数学定义：$T(n)=Θ(f(n))$当且仅当存在一个正常数$c<em>1$，$c</em>2$以及正整数$n<em>0$，使得对于任意$n&gt;n</em>0$，总有$c_1f(n)\leqslant T(n)\leqslant cf(n)$。</p>

<p>这表示，T(n)与f(n)仅相差一个常数项系数大小，也就是说它们的增长率相同。</p>

<h3 id="o-and-">o and ω</h3>
<p>此外，还有Little-Oh(o)和ω符号，他们的定义与Big-Oh和Ω相似，但是取消了相等的条件。</p>

<h3 id="limits">Limits</h3>
<p>用极限的观点来看，这些记号其实就是当$n$趋近于无穷大时两函数导数的比值$\frac{T’(n)}{f’(n)}$。</p>

<p>如果比值为<code>无穷大</code>，则T(n)的增长率大于f(n)，即为T(n)=ω(f(n))</p>

<p>如果比值为<code>常数</code>，则T(n)的增长率等于f(n)，即为T(n)=Θ(f(n))</p>

<p>如果比值为<code>无穷小</code>，则T(n)的增长率小于f(n)，即为T(n)=o(f(n))</p>

<h2 id="divide-and-conquer-paradigm---">三、Divide and Conquer Paradigm - 分治算法</h2>
<p>在解决某一特定问题的时候，递归是一种经常采用的思路，这一类算法不断地调用自身，直到遇到<code>Base Case</code>后停止递归，综合递归结果以得出最后的答案。</p>

<p>但我发现身边的不少同学都对于递归算法存在一定程度上的误解，认为递归调用会导致时间和内存上的多余开销造成浪费，所以要尽量避免使用递归。在《C Primer Plus》里就提到了一个经典的递归算法——Fibonacci算法，当然了，是一个经典的糟糕算法。</p>

<p>因为fibonacci数列规定$Fib(n)=Fib(n-1)+Fib(n-2)$，所以自然就有了下面的算法：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>糟糕的Fibonacci递归实现</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="nf">Fib</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">){</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="k">return</span> <span class="n">Fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="n">Fib</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">2</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span> <span class="c1">//假设fibonacci前两项均为1</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>从数学意义上来看完全没有问题，不过在计算机上这实在糟糕得不能再糟糕了。有兴趣的同学可以自己运行一下这段程序，记得不要把n定得太高了哦XD，在我的电脑上计算Fib(45)要花7秒的时间，计算Fib(46)用了9.5秒的时间（其实我还计算了一下Fib(50)，只用了76秒哦）。</p>

<p>虽然上面给出了一个糟糕的递归例子，但是通过对算法的学习，我们可以看到经过良好编写的递归程序具有强大的力量，而且形式优雅，给人一种化腐朽为神奇的感觉，Algorithms第一周的课程里边也给出了几个很好的例子，它们的算法复杂度都是$O(nlog_2n)$，对于大数据远比使用常规方法的$(O(n^2))$要来的高效。那么下面进入正题。</p>

<p><code>Divide and Conquer</code>是一种使用递归来解决问题的办法，中文里边叫作<code>分治算法</code>，也就所谓的是<code>分而治之</code>。D&amp;C算法分为三步，一是<code>Divide</code>（分），二是<code>Conquer</code>（治），三是<code>Combine</code>（合）。先把大的复杂的问题分解成小的相对简单的子问题，然后再递归地解决这些相对容易的小问题，再把所有的结果综合起来得出原本问题的解。</p>

<p>在CLRS中对D&amp;C描述到：</p>

<blockquote>
  <p>1 - <strong>Divide</strong> the problem into a number of subproblems that are smaller instances of the same problem;</p>

  <p>2 - <strong>Conquer</strong> the subproblems by solving them recursively. If the problem sizes are small enough, however, just solve the subproblems in a straightforward manner;</p>

  <p>3 - <strong>Combine</strong> the solutions to the subproblems into the solution for the original problem.</p>
</blockquote>

<h3 id="integer-multiplication">Integer Multiplication</h3>
<p>对于乘法来说，我们最为熟悉的无非就是所谓的竖式计算法（貌似是叫长乘法？），这种方法直观，简单，从小学二年级开始学习乘法以来，我们就一直使用着竖式计算法，可谓得心应手，已经成了一种本能。</p>

<p>对于两个四位数相乘的计算而言，我们一般会将两个数垂直对齐，然后用下边各位依次乘以上边的数，并按位左移。最后把所得各相乘结果加起来，得到的就是两个四位数的相乘结果。这其中我们每一位的数字都需要进行4次乘法运算，有进位的话可能还有四次加法运算，所以在竖式计算法中总共会用到$(4+4)\times4=32$次个位数的加法乘法运算。如果把乘数的位数设为n，那么竖式计算法所需的操作量就是$2*n^2$，显然时间复杂度应为$Θ(n^2)$。</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{equation}
\begin{aligned}
&1234\\
\times&5678\\
\hline
&9872\\
8&638\\
74&04\\
617&0\\
\hline
700&6652
\end{aligned}
\end{equation}
 %]]&gt;</script>

<p>上Algorithms这门课之前我几乎没怎么想过要对这种乘法计算方法进行优化。它足够好了吗？在我看来是的，不过计算机科学家们并不满足于此。于是有了<code>Karatsuba Multiplication</code>算法。</p>

<h4 id="karatsuba-multiplication---">Karatsuba Multiplication - 快速乘法</h4>
<p>这种乘法的时间复杂度为$Θ(n^{log_23})$。</p>

<p>现在假设两个数相乘：$5678\times1234=7006652$</p>

<p>令$a=56，b=78，c=12，d=34$</p>

<p>1：计算$a\times c=672$</p>

<p>2：计算$b\times d=2652$</p>

<p>3：计算$(a+b)(c+d)=134\times46=6164$</p>

<p>4.：计算$(3)-(2)-(1)=6164-2652-672=2840$</p>

<p>5：综合结果$a\times c，(a+b)(c+d)-a\times c-b\times d，b\times d$，也就是：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{equation}
\begin{aligned}
6720000&\\
2652&\\
284000&\\
\hline
7006652&
\end{aligned}
\end{equation}
 %]]&gt;</script>

<p>上面的过程有些地方难以理解，不过还能看出来是使用了D&amp;C。下面是算法的一些思路：</p>

<p>令x和y为乘数a，b，c，d分别是各乘数的前半部分和后半部分，n为乘数位数</p>

<p>所以$x=10^{\frac{n}{2}}\times a + b，y=10^{\frac{n}{2}}\times c + d$</p>

<p>则$x\times y = 10^{n}\times a\times c + 10^{\frac{n}{2}}\times (a\times d+b\times c) + b\times d$</p>

<p>这样，我们就把一个$\overline{ab}\times \overline{cd}$的问题转化为了$a\times c，b\times d，a\times d和b\times c$的相似的小问题，把乘数的位数变为了二分之一。</p>

<p>所以现在我们需要求4个两位数的乘法。</p>

<p>又因为$(a+b)(c+d)=a\times c+a\times d+b\times c+b\times d$，而其中$a\times c和b\times d$都是待求量，如果我们把$(a\times d+b\times c)$转化为$(a+b)(c+d)-a\times c-b\times d$，那我们就只用求3次乘法运算，因为相比加减法运算，乘法运算更为消耗时间。</p>

<p>Base case就是当x和y均为1位数时，这时候仅仅把x和y乘起来就行。</p>

<p>因为每次将$n$切分为两个$\frac{n}{2}$，每个部分需要3次乘法，所以总共需要$3^{log<em>2n}$次基本乘法，时间复杂度也就是$Θ(n^{log</em>23})\approxΘ(n^{1.1})$。</p>

<p>需要注意的是，如果不进行上面这一步，仍旧划分为4个两位数乘法，那么一共需要$4^{log_2n}$次基本乘法，也就是$n^2$次，复杂度仍为$Θ(n^2)$没有变化。</p>

<p>不过呢，计算机做乘法不是利用长乘法，如果仅仅用整型数据来实现这个算法没有任何意义，因为允许的相乘的数字太小了，那么Karatruba算法有何用武之地呢？我查了一下，发现它应该是被用于大数相乘的。比如两个1024位的数字相乘，这个时候就没办法使用两个整型数据进行乘法运算，因为整型存不下如此大的数值，这个时候就只能用数组来模拟大数，比如用一个数组元素代表数字的一位。这个时候大数相乘就只能人为地模拟乘法，而Karatsuba也就派上了用场。</p>

<p>我模拟过的大数也是利用数组，最多优化一下每一个数组元素存储4～6位数以减少空间的开销，不过本质上还是在模拟竖式乘法。而大数相乘涉及到数组的操作，而乘法涉及到的数组的操作复杂度远远超过了归并算法的数组的操作复杂度，如何divide数组、如何combine数组就成了一个大问题。以前实现的大数乘法的经验这里完全用不上。思索未果，也没有查到相关的实现代码，等待高手来实现吧。</p>

<hr />

<h3 id="merge-sort---">Merge Sort - 归并排序</h3>
<p>这是一个排序算法，在1945年由John von Neumann所提出。和我们熟悉的冒泡排序、插入排序、选择排序相比，这个算法面对大数据的时候占有很大优势，因为它的算法时间复杂度仅为$Θ(n\log<em>2n)$，而冒泡排序等都为$Θ(n^2)$。需要注意，$\log</em>2n$要远小于$n$哦，可以把$2^{20}$代进去看看。</p>

<h4 id="section-2">算法实现</h4>
<p>Merge Sort的思路完全符合D&amp;C：</p>

<p><strong>Divide：</strong>将$n$个元素的数组划分为两个$\frac{n}{2}$个元素的数组；</p>

<p><strong>Conquer：</strong>调用自身来递归地解决这两个比原数组小的排序问题。如果数组足够小（只有1个元素或1个元素也没有），那么就为<code>Base Case</code>，所以直接解决掉（在这里也就是什么都不做，不再继续调用自身）；</p>

<p><strong>Combine：</strong>这一点是整个归并排序中最重要的一点，把被分开的两个数组重新合并为一个数组，合并好的数组也就是排好序的原数组。</p>

<p>不再详解，这里给出C语言的实现代码。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>mergeSort.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class="line"><span class="cp">#define NUM 10</span>
</span><span class="line"><span class="kt">int</span> <span class="n">L</span><span class="p">[</span><span class="n">NUM</span><span class="p">],</span> <span class="n">R</span><span class="p">[</span><span class="n">NUM</span><span class="p">];</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">merge</span><span class="p">(</span><span class="kt">int</span> <span class="n">A</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">p</span><span class="p">,</span> <span class="kt">int</span> <span class="n">q</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">){</span>    <span class="cm">/* 合并两个数组 */</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">n1</span><span class="p">,</span> <span class="n">n2</span><span class="p">,</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">k</span><span class="p">;</span>
</span><span class="line">    <span class="n">n1</span> <span class="o">=</span> <span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="o">-</span><span class="n">p</span><span class="p">;</span>                 <span class="cm">/* 左子数组的长度 */</span>
</span><span class="line">    <span class="n">n2</span> <span class="o">=</span> <span class="n">r</span><span class="o">-</span><span class="n">q</span><span class="p">;</span>                   <span class="cm">/* 右子数组的长度 */</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n1</span><span class="p">;</span> <span class="o">++</span><span class="n">j</span><span class="p">)</span>
</span><span class="line">        <span class="n">L</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="n">j</span><span class="p">];</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">n2</span><span class="p">;</span> <span class="o">++</span><span class="n">k</span><span class="p">)</span>
</span><span class="line">        <span class="n">R</span><span class="p">[</span><span class="n">k</span><span class="p">]</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="o">+</span><span class="n">k</span><span class="p">];</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">j</span> <span class="o">=</span> <span class="n">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n1</span> <span class="o">&amp;&amp;</span> <span class="n">k</span> <span class="o">&lt;</span> <span class="n">n2</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class="line">        <span class="k">if</span><span class="p">(</span><span class="n">L</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">R</span><span class="p">[</span><span class="n">k</span><span class="p">]){</span>
</span><span class="line">            <span class="n">A</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">R</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
</span><span class="line">            <span class="n">k</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span><span class="k">else</span><span class="p">{</span>
</span><span class="line">            <span class="n">A</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">L</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class="line">            <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span><span class="n">j</span> <span class="o">&lt;</span> <span class="n">n1</span><span class="p">){</span>
</span><span class="line">        <span class="n">A</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">L</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>
</span><span class="line">        <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">        <span class="n">j</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span><span class="n">k</span> <span class="o">&lt;</span> <span class="n">n2</span><span class="p">){</span>
</span><span class="line">        <span class="n">A</span><span class="p">[</span><span class="n">p</span><span class="o">+</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">R</span><span class="p">[</span><span class="n">k</span><span class="p">];</span>
</span><span class="line">        <span class="n">i</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">        <span class="n">k</span><span class="o">++</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kt">void</span> <span class="nf">mergeSort</span><span class="p">(</span><span class="kt">int</span> <span class="n">A</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">p</span><span class="p">,</span> <span class="kt">int</span> <span class="n">r</span><span class="p">){</span>  <span class="cm">/* Merge Sort主函数 */</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">p</span> <span class="o">&gt;=</span> <span class="n">r</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>          <span class="cm">/* Base Case */</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">q</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">+</span><span class="n">r</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>            <span class="cm">/* Divide */</span>
</span><span class="line">    <span class="n">mergeSort</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">);</span>         <span class="cm">/* Conquer */</span>
</span><span class="line">    <span class="n">mergeSort</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>       <span class="cm">/* Conquer */</span>
</span><span class="line">    <span class="n">merge</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="n">p</span><span class="p">,</span> <span class="n">q</span><span class="p">,</span> <span class="n">r</span><span class="p">);</span>          <span class="cm">/* Combine */</span>
</span><span class="line"><span class="p">}</span>
</span><span class="line"><span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">*</span><span class="n">argv</span><span class="p">[]){</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">A</span><span class="p">[</span><span class="n">NUM</span><span class="p">],</span> <span class="n">i</span><span class="p">;</span>
</span><span class="line">    <span class="cm">/* freopen(&quot;./input.txt&quot;, &quot;r&quot;, stdin); */</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NUM</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">        <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class="line">    <span class="n">mergeSort</span><span class="p">(</span><span class="n">A</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="n">NUM</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">NUM</span><span class="p">;</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span>
</span><span class="line">        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d &quot;</span><span class="p">,</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class="line">    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>对Merge Sort进行一些小小的修改，还可以用来计算逆序数（Inversions），因为是基于$Θ(n\log<em>2n)$的归并排序，所以计算逆序数的算法同样是$Θ(n\log</em>2n)$的时间复杂度。</p>

<h4 id="analysis-of-merge-sort---">Analysis of Merge Sort - 分析归并算法</h4>

<p>上面已经提到，Merge Sort的算法时间复杂度是$Θ(n\log_2n)$，对于大数据来说优于插入排序等算法的$Θ(n^2)$。</p>

<p>但是为什么呢？为什么排序同样一个数组，把原数组分开成几个数组分别排序就比一起排序要快呢？分开排序不还多了一个Combine的步骤吗？</p>

<p>在继续讲算法分析之前，可以思考一下排序一个$n$个元素的数组，当然是在<code>Worst Case</code>的情况下（设$n$为$2$的幂）：</p>

<p><strong>1.</strong><code>插入排序</code>所需的<code>比较次数</code>为$\frac{n(n-1)}{2}=\frac{1}{2}n^2-\frac{1}{2}n$。</p>

<p><strong>2.</strong>下面我们还是使用<code>插入排序</code>，但是我们先把原数组分成两个$\frac{n}{2}$的数组来进行排序，然后将两个数组进行合并：显然对于每一个$\frac{n}{2}$个元素的数组来说，所需的<code>比较次数</code>为$\frac{\frac{n}{2}(\frac{n}{2}-1)}{2}=\frac{1}{8}n^2-\frac{1}{4}n$，因为有两个数组，再加上Combine所需进行的$n$次比较，一共所需的<code>比较次数</code>为$\frac{1}{4}n^2+\frac{1}{2}n$。</p>

<p>显然，通过对二次项系数的比较可知：只要$n$足够大，第二种方法是要优于第一种方法的。</p>

<p>你能看出来为什么吗？</p>

<p>其实这一次Divide减少了很多不必要的比较。方法1中，第i个数要和它前面的i-1个数比较，而Divide之后，前$\frac{n}{2}$个数比较次数不变，后$\frac{n}{2}$个数，每个数的比较次数却都减少了$\frac{n}{2}$，所以一共就减少了$\frac{1}{4}n^2$次比较，而这种方法是否实用，就看减少的比较次数$\frac{1}{4}n^2$和增加的比较次数$n$谁大谁小了。</p>

<p>这下子有点儿感觉了吧，要是继续Divide下去，减少的冗余比较岂不是更多？</p>

<p>下面来看看一个比较正式的分析：</p>

<p>在分析涉及递归的D&amp;C算法时，我们总可以把算法的运行时间表示为一个递推函数。</p>

<p>设Divide时把问题划分为a个子问题，每一个问题是原本问题大小的$\frac{1}{b}$，c是判断base case的常数，可得：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{equation}
\begin{aligned}
T(n)=
\begin{cases}
Θ(1) &{n\leqslant c}\\
aT(\frac{n}{b})+D(n)+C(n) &{Otherwise}
\end{cases}
\end{aligned}
\end{equation}
 %]]&gt;</script>

<p>所以对于Merge Sort来说，$a=b=2$：</p>

<p><strong>Divide：</strong>对于归并排序来讲，这一步仅仅是一次计算而已，所以$D(n)=Θ(1)$。</p>

<p><strong>Conquer：</strong>每次递归解决两个大小为$\frac{n}{2}$的问题，可得运行时间为：$2T(\frac{n}{2})$。</p>

<p><strong>Combine：</strong>对于$n$个元素的数组来说，每次combine都需要花费$Θ(n)$的时间，所以$T(n)=Θ(n)$。</p>

<p>可得：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{equation}
\begin{aligned}
T(n)=
\begin{cases}
Θ(1) &{n=1}\\
2T(\frac{n}{2})+Θ(n) &{n> 1}
\end{cases}
\end{aligned}
\end{equation}
 %]]&gt;</script>

<p>设c为解决$n=1$时和每个元素操作所需的常数时间，利用<code>Recursion Tree</code>，便可以很直观的进行分析了。因为每一次将数组划分为相等的两部分，所以这棵<code>Recursion Tree</code>是一棵满二叉树，根结点以下第$i$层拥有节点数为$2^{i}$，同时这一层每一个节点拥有的元素数量为$\frac{n}{2^i}$，已经假设单个元素操作需要常数项时间$c$，相乘即可得每一层要进行<code>Combine</code>阶段的操作量均为$cn$。而这棵满二叉树一共有$log_2n+1$层，所以总共的操作量为：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{equation}
\begin{aligned}
&(log_2n+1)\times cn\\
=&cnlog_2n+cn\\
=&Θ(nlog_2n)
\end{aligned}
\end{equation}
 %]]&gt;</script>

<hr />

<h3 id="counting-inversions---">Counting Inversions - 计算逆序数</h3>

<p>这个是计算<code>逆序数</code>的算法，学习线性代数时有学到这个概念，不过没想到还能在商品推荐里边应用。在一个排列中，如果一对数的前后位置与大小顺序相反，即前面的数大于后面的数，那么它们就称为一个逆序。逆序数就是一个排列中所有逆序的数量。</p>

<p>用最简单的Brutal Force Algorithm来解决这个问题的话，无疑就是将数列中的每一对数字进行比较，一共需要的比较次数为$\binom{n}{2}=Θ(n^2)$。</p>

<p>不过这个算法的实现可以基于<code>Merge Sort</code>，稍作修改即可。因为是基于$Θ(n\log<em>2n)$的归并排序，多出来的操作为常数项时间，所以计算逆序数的算法同样是$Θ(n\log</em>2n)$的时间复杂度。</p>

<p>因为要计算前面的数大于后面的数的数量，我们便可以变相地对数组进行排序，计算要正确排序某个数需要将它左移的总位数——也就是和这个数相关的<code>Inversion</code>。</p>

<p>修改后的算法中计算逆序数最核心的一句便是设立一个新的变量cnt计算逆序数的数量：</p>

<p><code>cnt+=n1-i+1;</code></p>

<p>这一句是关键，<code>Combine</code>时每当右子数组的元素被选中时，逆序数增加左子数组的剩余元素个数。</p>

<p>再让<code>merge</code>函数在结束时返回当前merge阶段增加的逆序数。</p>

<p>将其添加到合适的地方后，对<code>Merge Sort</code>进行如下修改：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>MergeSortAndCountInversion.c</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">int</span> <span class="nf">MergeSortAndCountInversion</span><span class="p">(</span><span class="kt">int</span> <span class="n">A</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">p</span><span class="p">,</span><span class="kt">int</span> <span class="n">r</span><span class="p">){</span>
</span><span class="line">    <span class="k">if</span><span class="p">(</span><span class="n">p</span><span class="o">==</span><span class="n">r</span><span class="p">)</span> <span class="k">return</span> <span class="mi">0</span><span class="p">;</span><span class="c1">//New Base Case</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">left</span><span class="p">,</span><span class="n">right</span><span class="p">,</span><span class="n">split</span><span class="p">,</span><span class="n">q</span> <span class="o">=</span> <span class="p">(</span><span class="n">p</span><span class="o">+</span><span class="n">r</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span>
</span><span class="line">    <span class="n">left</span> <span class="o">=</span> <span class="n">MergeSortAndCountInversion</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="n">q</span><span class="p">);</span>
</span><span class="line">    <span class="n">right</span> <span class="o">=</span> <span class="n">MergeSortAndCountInversion</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">q</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">r</span><span class="p">);</span>
</span><span class="line">    <span class="n">split</span> <span class="o">=</span> <span class="n">MergeAndCountSplitInversion</span><span class="p">(</span><span class="n">A</span><span class="p">,</span><span class="n">p</span><span class="p">,</span><span class="n">q</span><span class="p">,</span><span class="n">r</span><span class="p">);</span>
</span><span class="line">    <span class="k">return</span> <span class="n">left</span> <span class="o">+</span> <span class="n">right</span> <span class="o">+</span> <span class="n">split</span><span class="p">;</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>便可以使用MergeSortAndCountInversion函数来得到逆序数了。</p>

<p>修改后代码能够正确得出一定范围内的逆序数答案，但无法直接解决Programming Problem 1的问题，因为int的表示范围的因素，当然稍作修改便可以得出正确答案。对于10万个数据而言，这种算法运行时间不足1秒，而使用brute force algorithm则要花费20秒～30秒左右的时间。这是C语言的效率，据说Python用穷举的话要花两分钟左右。</p>

<p>提示，正确答案为10位数字，以2开头，以8结尾。</p>

<hr />

<h3 id="straseen-matrix-multiplication">Straseen Matrix Multiplication</h3>
<p>同<code>Karatsuba Multiplication</code>类似，这个算法也是使用纯数学技巧加上D&amp;C来得到相对较高的效率。</p>

<p>在矩阵乘法的定义中，$A\times B=C$，结果矩阵C的第i行第j列元素$C_{ij}$等于矩阵A的第i行与矩阵B的第j列的对应元素相乘的和，所以一共需要进行$n^3$次相乘。这是一个立方复杂度的算法。</p>

<p>而<code>Straseen Matrix Multiplication</code>进行数学变化，利用D&amp;C将复杂度降至了$Θ(n^{2.8})$左右，看似优化不大，但是对于大数据来说已经是极大的改善了。</p>

<p>这个算法不进行详解，仅仅是利用数学变化又一次D&amp;C应用而已，略过。</p>

<hr />

<h3 id="closet-pair">Closet Pair</h3>
<p>这个算法是求平面坐标系中，距离最短的两点。</p>

<p>这类问题在机器人学、机器视觉、电脑图像里边都占有相当重要的地位，在ACM的竞赛题目中也时有出现。</p>

<p>在平面坐标系中，求两点距离有个很简单的公式$\sqrt{(x_i-x_j)^2+(y_i-y_j)^2}$，暴力法当然就是把给出的所有点都进行成对的比较，时间复杂度为$Θ(n^2)$，当然，我们现在肯定不这么做。同样，我们可以站在<code>Merge Sort</code>的肩上前进。</p>

<p>当要排序的点都在一条直线上时，我们只需要先将其进行排序，然后找出最近的两点就行，而这可以在线性时间内完成，无需对每一对点进行比较。无疑，一维的情况下求<code>Closet Pair</code>可以在$Θ(nlog_2n)$内完成。</p>

<p>但是点在平面上时，</p>

<p>施工中。。。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用Geek的方式来写博客(1)：在Github上搭建Octopress]]></title>
    <link href="http://www.cyberluc29.tk/blog/2013/08/01/building-octopress-blog/"/>
    <updated>2013-08-01T10:45:00+08:00</updated>
    <id>http://www.cyberluc29.tk/blog/2013/08/01/building-octopress-blog</id>
    <content type="html"><![CDATA[<p>听说Octopress还是去年的时候，原因是我宿舍隔壁一哥们买了个域名。因为我一直有开个博客的想法，但不知道哪家提供的服务比较好，于是就去问了一下，没想到他说他把他的博客托管在了Github上。没问明白，我回宿舍后就Google了一下，于是发现了Octopress这个Ruby项目。</p>

<p>这种编写博客的方式立即就吸引了我。那段时间还挣扎在VIM和Emacs之间，对于Markdown也是久闻大名，当即决定，就是这货了！</p>

<!-- more -->

<p>当时对于Linux和Github都还算不上熟悉，一切都还在摸索的阶段，折腾了几下发完一篇Hello World之后就放下了。一直到这个暑假，因为各种原因（再次-_-）下定决心要开一个博客，于是顿时回想起了Octopress。做了一个调查后，我决定换用使用Python编写的Pelican来搭建博客，因为相对来说我对Python更有好感，不过用Pelican搭建好博客后在deploy的阶段老是遇到莫名其妙的字符编码错误，Google上搜索不到任何相关的资料，折腾了一天后连第一篇博文都没发到网上。</p>

<p>于是我又把目光转回了Octopress。在Github的页面上看了看发现大家还是挺活跃的，最近的一次更新在十多天之前，于是决定还是用Octopress来搭建博客。</p>

<p>Octopress的默认主题我觉得很不错，没有什么修改的动力，不过仍旧安装了一些插件，进行了一些小修小补，这里把安装过程记录下来，发到网上，供广大和我一样刚接触Octopress的朋友们参考一下吧。</p>

<h3 id="octopress">1.安装Octopress</h3>
<p>这里给出<a href="http://octopress.org/docs/setup/">官方教程</a>的链接，本博文的教程和官方的几乎一致，不过在一些细节上会进行更详细的解说。</p>

<p>如果你还不知道git是什么的话，那么<a href="http://www.open-open.com/lib/view/open1328069609436.html">这里</a>有一份中文详细教程，可以让你对git有一个大致全面的了解。</p>

<p>首先，搭建的环境是在Linux下（我使用的是Archlinux）。据说因为ruby的发展过于迅猛，导致了短时间内大量版本层出不穷，各种ruby脚本基于各种不同的ruby版本被写出来，这就导致了版本依赖方面略微复杂。所以一般并不推荐直接安装ruby，而是安装<a href="http://octopress.org/docs/setup/rbenv/">rbenv</a>或者<a href="http://octopress.org/docs/setup/rvm/">RVM</a>，用它们来进行ruby的版本控制。</p>

<p>上面已经给出了<code>rbenv</code>和<code>RVM</code>的安装指南链接，不过这里还是稍微讲一下，当然是针对我用的<code>rbenv</code>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>安装rbenv</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nb">cd</span>
</span><span class="line">git clone git://github.com/sstephenson/rbenv.git .rbenv
</span><span class="line"><span class="nb">echo</span> <span class="s1">&#39;export PATH=&quot;$HOME/.rbenv/bin:$PATH&quot;&#39;</span> &gt;&gt; ~/.zshrc <span class="c">#我使用的是zsh，bash或其他shell的用户需要进行相应更改</span>
</span><span class="line"><span class="nb">echo</span> <span class="s1">&#39;eval &quot;$(rbenv init -)&quot;&#39;</span> &gt;&gt; ~/.zshrc
</span><span class="line">git clone git://github.com/sstephenson/ruby-build.git ~/.rbenv/plugins/ruby-build
</span><span class="line"><span class="nb">source</span> ~/.zshrc
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>对于最新版的Octopress来说，使用<code>rbenv</code>进行安装的话需要安装<code>ruby-1.9.3-p194</code>，而不是官方所说的<code>1.9.3-p0</code>。更新版的ruby是否能用，我没有进行过尝试。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>安装ruby</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rbenv install 1.9.3-p194
</span><span class="line">rbenv rehash
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>运行<code>ruby --version</code>查看是否已经成功安装了指定版本的ruby。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>查看ruby版本</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>ruby --version
</span><span class="line">rbenv: ruby: <span class="nb">command </span>not found
</span><span class="line">
</span><span class="line">The <span class="sb">`</span>ruby<span class="err">&#39;</span> <span class="nb">command </span>exists in these Ruby versions:
</span><span class="line">  1.9.3-p194
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>ruby搞定了，接下来就该把Octopress从Github上拖回来了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Clone Octopress</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">git clone git://github.com/imathis/octopress.git MyBlog <span class="c">#MyBlog修改为你想要的名字</span>
</span><span class="line"><span class="nb">cd </span>MyBlog
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后安装Octopress运行所必需的依赖。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>安装Octopress的依赖</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">gem install bundler
</span><span class="line">rbenv rehash
</span><span class="line">bundle install
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>此时，Octopress的环境已经被安装好了，下面是安装Octopress的默认主题。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>安装Octopress主题</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rake install
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>至此，Octopress就已经被部署好了。</p>

<p>注意上面<code>gem install bundler</code>有时候会遇到<code>Connection Refused</code>的情况，不明原因，不过加上代理服务器后就成功安装了。如果你也遇到了相关的问题，那么就找一个代理服务器，或者自己搭建一个<code>GoAgent</code>科学上网，这里就不详细叙述了，一切请Google吧。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Gem使用代理</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">gem install bundler --http-proxy http://localhost:8087
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>### 2.配置Octopress
<code>Octopress</code>的根目录下有四个配置文件：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Octopress配置文件</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">_config.yml       # Main config (Jekyll&#39;s settings)
</span><span class="line">Rakefile          # Configs for deployment
</span><span class="line">config.rb         # Compass config
</span><span class="line">config.ru         # Rack config
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>一般来说其中只有两个需要进行更改，那就是<code>_config.yml</code>和<code>Rakefile</code>。</p>

<p>首先我们来看<code>_config.yml</code>，一般来说需要更改的地方如下：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>_config.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">url: http://yoursite.com
</span><span class="line">title: My Octopress Blog
</span><span class="line">subtitle: A blogging framework for hackers.
</span><span class="line">author: Your Name
</span><span class="line">simple_search: http://google.com/search
</span><span class="line">description:
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>将其中的信息换成你的信息，比如：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>_config.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">url: http://cryonyx.github.com
</span><span class="line">title: Cryonyx
</span><span class="line">subtitle: Geek is an attitude.
</span><span class="line">author: Cryonyx
</span><span class="line">simple_search: http://google.com/search
</span><span class="line">description: This is my personal blog.
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>要开启博客的评论功能的话，请去<a href="http://disqus.com/">Disqus</a>注册一个帐号，然后把相应的站点<code>shortname</code>填写到相关位置。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>disqus</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="text"><span class="line"># Disqus Comments
</span><span class="line">disqus_short_name: Your Site&#39;s Short Name
</span><span class="line">disqus_show_comment_count: false
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>更详细（其实也不详细）的介绍请看<a href="http://octopress.org/docs/configuring/">官方文档</a>。</p>

<h3 id="section">2.使用搭建好的博客发文</h3>
<p>做好了基础配置，那么下面就该发布一篇新的文章了来试试了，我当初发布了第一篇Hello World。发布新文章的命令是：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>发布新文章</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>rake new_post<span class="o">[</span><span class="s2">&quot;title&quot;</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这条命令会自动在<code>source/_post</code>里生成一个名为<code>yyyy-mm-dd-post-title.markdown</code>的文件，然后你就可以用自己喜欢的编辑器对其进行修改。</p>

<p>假设我们<code>rake new_post["Hello World"]</code>，那么我们会在<code>source/_post</code>下得到<code>2013-08-01-hello-world.markdown</code>，Octopress把文件名自动转换为了小写，而且空格也使用<code>-</code>代替，测试发现，点<code>.</code>也会被<code>dot</code>所代替。</p>

<p>如果不对<code>_config.yml</code>文件中的<code>permalink</code>进行更改的话，那么这篇博文的地址就是<code>http://site.com/blog/2013/08/01/hello-world/index.html</code>。虽然你<code>rake new_post["title"]</code>时的<code>title</code>将作为你的文章的默认标题，但文章的链接地址和它有关，文章的具体标题内容和它无关，后面可以对文章的具体标题进行修改。</p>

<p>我们打开新建的文件，可以看到如下的被称为<code>yaml front matter</code>内容，它包含了文章的基本信息，可以帮助<code>Jkelly</code>正确生成你的文章页面等信息：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>source/_post/2013-08-01-hello-world.markdown</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="yaml"><span class="line"><span class="nn">---</span>
</span><span class="line"><span class="l-Scalar-Plain">layout</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">post</span>
</span><span class="line"><span class="l-Scalar-Plain">title</span><span class="p-Indicator">:</span> <span class="s">&quot;Hello</span><span class="nv"> </span><span class="s">World&quot;</span>
</span><span class="line"><span class="l-Scalar-Plain">date</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">2013-08-01 11:12</span>
</span><span class="line"><span class="l-Scalar-Plain">comments</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
</span><span class="line"><span class="l-Scalar-Plain">categories</span><span class="p-Indicator">:</span>
</span><span class="line"><span class="nn">---</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>其中<code>layout: post</code>是指调用<code>source/_layout/post.html</code>作为文章模板，<code>title</code>无疑就是文章的标题，默认值是新建文章填入的字符。如果不想让文章被评论的话，可以设置<code>comments</code>为<code>false</code>。而<code>categories</code>自然就是给文章的分类了。</p>

<p>其实可以使用的属性项远不止如此，比如我们还可以加入<code>keywords</code>，<code>description</code>，这样可以生成网页的<code>meta</code>信息，帮助推广。另外如果一篇文章只是草稿，还没有到发布的时候，可以加入<code>published: false</code>，这样文章就不会显示出来了（其实连<code>generate</code>都省了）。</p>

<p>每次都手动输入略显麻烦，我们可以稍微修改一下<code>Rakefile</code>，找到第106行左右的区域：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Rakefile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="rb"><span class="line">  <span class="nb">puts</span> <span class="s2">&quot;Creating new post: </span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">  <span class="nb">open</span><span class="p">(</span><span class="n">filename</span><span class="p">,</span> <span class="s1">&#39;w&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">post</span><span class="o">|</span>
</span><span class="line">    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;---&quot;</span>
</span><span class="line">    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;layout: post&quot;</span>
</span><span class="line">    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;title: </span><span class="se">\&quot;</span><span class="si">#{</span><span class="n">title</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/&amp;/</span><span class="p">,</span><span class="s1">&#39;&amp;amp;&#39;</span><span class="p">)</span><span class="si">}</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;date: </span><span class="si">#{</span><span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">strftime</span><span class="p">(</span><span class="s1">&#39;%Y-%m-%d %H:%M&#39;</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;comments: true&quot;</span>
</span><span class="line">    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;categories: &quot;</span>
</span><span class="line">    <span class="n">post</span><span class="o">.</span><span class="n">puts</span> <span class="s2">&quot;---&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>一目了然，这就是默认的yaml信息模板，相应地进行更改就好，比如加上<code>post.puts "published: true"</code>。</p>

<p>还可以添加上<code>tags</code>，不过tag功能需要另外安装插件，这会在后面一篇博文中提到。</p>

<p>另外需要提醒一下的是，<code>rake_new_post</code>时不能使用中文作为标题：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>rake new_post使用中文的错误提示</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="nv">$ </span>rake new_post<span class="o">[</span><span class="s2">&quot;测试中文标题&quot;</span><span class="o">]</span>
</span><span class="line">rake aborted!
</span><span class="line"><span class="c">### You haven&#39;t set anything up yet. First run `rake install` to set up an Octopress theme.</span>
</span><span class="line">
</span><span class="line">Tasks: <span class="nv">TOP</span> <span class="o">=</span>&gt; new_post
</span><span class="line"><span class="o">(</span>See full trace by running task with --trace<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>那么博客文章能不能使用中文标题呢？当然是可以的，<code>rake new_post</code>的时候给文章起一个英文名，或者用拼音代替，然后修改<code>markdown</code>文件里的<code>title</code>即可以给文章设置中文名了。</p>

<p>另外一个需要注意的地方是，每一个冒号后面都必须要有一个<code>空格</code>，否则会<code>Build Failed</code>。</p>

<p>在<code>---</code>下方写上博客的内容，比如再写一句”Hello World!”，这篇博文就算完成了，保存吧。</p>

<p>然后在博客目录<code>rake generate</code>，这条命令会自动将所有<code>markdown</code>文件转换为<code>html</code>文件。转换完成后<code>rake preview</code>，即可用网址<code>http://localhost:4000</code>在浏览器中预览博客的样子。当<code>rake preview</code>运行的时候，可以对文章的<code>markdown</code>文件继续进行修改，不用再次<code>rake generate</code>，几秒钟的延迟后更改就会体现出来。不过新增文章等一部分操作，都需要再次<code>rake generate</code>才能正确预览。</p>

<p>Octopress博客默认有两个页面，一个是”Blog”，一个是”Archive”，如果想要新增一个页面的话，就需要用<code>rake new_page["page"]</code>命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rake new_page<span class="o">[</span>About<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这会在<code>source</code>目录下建立一个<code>About</code>文件夹，其中包含有<code>index.markdown</code>，可以对其进行修改。</p>

<p>但是新增的页面并不会自动地显示到导航栏上去，还需要进行一定的修改。找到<code>source/_includes/custom/navigation.html</code>：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="html"><span class="line"><span class="nt">&lt;ul</span> <span class="na">class=</span><span class="s">&quot;main-navigation&quot;</span><span class="nt">&gt;</span>
</span><span class="line">  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>Blog<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class="line">  <span class="nt">&lt;li&gt;&lt;a</span> <span class="na">href=</span><span class="s">&quot;/blog/archives&quot;</span><span class="nt">&gt;</span>Archives<span class="nt">&lt;/a&gt;&lt;/li&gt;</span>
</span><span class="line"><span class="nt">&lt;/ul&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在合适的位置添加上<code>&lt;li&gt;&lt;a href="http://www.cyberluc29.tk/about"&gt;About&lt;/a&gt;&lt;/li&gt;</code>即可。</p>

<p>另外博客默认是首页显示每一篇博文所有内容的，如果你不想这么做，那么就需要在博文的合适位置加上<code>&lt;!-- more --&gt;</code>，这可以让首页博文的内容在这里截止，并显示<code>Read On</code>，也就是点击继续阅读。</p>

<h3 id="github">3.将博客推送到Github</h3>
<p>我们现在搭建好了博客，也发了一篇文章，不过还没有把博客部署到github上。</p>

<p>首先你需要一个Github的帐号，并且创建一个名为<code>username.github.com</code>的repository。</p>

<p>记住，名字必须是<code>username.github.com</code>，只有这样才能以网址<code>username.github.com</code>打开你的博客。</p>

<p>然后输入以下命令：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">rake setup_github_pages <span class="c">#它会询问信息，并且进行相应的操作。按照提示进行就好。</span>
</span><span class="line">rake generate
</span><span class="line">rake deploy
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><code>setup_github_pages</code>时会让你输入你的repository的git地址，它给出了一个示例是<code>https://github.com/username/username.github.io</code>，但其实不能这么输入，会报错，你得换成<code>https://github.com/username/username.github.com.git</code>。</p>

<p>这样就把网站文件发送到你的repository了，不过目前仅仅是把生成好的网页文件发送了过去，octopress的一套东西包括markdown文件都还在本地呢，这样可不行。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line">git add .
</span><span class="line">git commit -m <span class="s2">&quot;Backup source&quot;</span>
</span><span class="line">git push origin <span class="nb">source</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>现在就大功告成了，这在你的repository下新建了一个source分支，用来保存你所有的源文件。以后要是本地文件丢失了，恢复就靠它了。</p>

<p>现在，打开浏览器，输入网址<code>http://username.github.com</code>，你应该就能看到你的博客了～欢呼吧。</p>

<p>什么？404？There isn’t a GitHub Page here？没关系，一般情况下这是因为延迟，稍等几分钟再看就好了。如果还是不行的话，检查一下上面的步骤，到<code>https://github.com/username/username.github.com</code>看看是否已经deploy成功，然后再<code>rake deploy</code>一次吧。</p>

<p>下面一篇博文将会讲到一些插件的使用，为博客添加上更丰富的功能，以及在使用这些插件中所遇到的一些问题和解决方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CLRS - Ch2.2 - Analyzing Algorithm]]></title>
    <link href="http://www.cyberluc29.tk/blog/2013/07/31/clrs-2-2-analyzing-algorithm/"/>
    <updated>2013-07-31T22:07:00+08:00</updated>
    <id>http://www.cyberluc29.tk/blog/2013/07/31/clrs-2-2-analyzing-algorithm</id>
    <content type="html"><![CDATA[<p>前面的介绍略过不再记录，直接来看对于Insertion Sort的分析。</p>

<h3 id="analysis-of-insertion-sort---">1.Analysis of insertion sort - 对插入排序的分析</h3>
<p>衡量一个算法的好坏，重要的标准之一当然就是解决问题所需的时间的多少了，通常情况下都是希望运行越快越好。而算法的运行时间并不是固定的，它根据输入数据量的大小而变化。所以通常建立一个以输入数据量大小（input size）<script type="math/tex">n</script>为自变量的函数来表示算法的运行时间（running time）。</p>

<!-- more -->

<p><code>Input size</code>的定义并不是固定不变的，对于前面提到的插入排序来说，<script type="math/tex">n</script>无非就是数组的大小。对于乘法来说，由于计算机的电子特性，一般用乘数的二进制位数作为衡量。而对于一个图论算法来讲，输入的数据量可能同时由图的节点(Vertices)和边(Edges)两个量组成。</p>

<p><code>Running time</code>在这里暂时被定义为算法对于某一特定输入所需要执行的<code>操作数量</code>，或者说是所需执行的<code>步数</code>，这就把算法的运行时间和具体的计算机独立了开来，所以并不以算法在某一特定电脑上的运行时间为标准来定义算法的运行时间。</p>

<p>假设每一行的操作都需要花费常数项的时间<script type="math/tex">c_i</script>，接下来我们就可以来分析一下插入排序了。</p>

<p>其实CLRS这里的定义略显繁琐，比我在《Data Structure and Algorithm Analysis in C》中看到的描述要复杂上一些，因为其书中将每一个基本操作定义为相同的常数项时间（当然其实乘法所需的时间远大于加法），每一行可以含有多个基本操作，比如for循环的那一行就含有一次赋值，一次比较，与一次自增。而CLRS将每一行所需时间定义为一个常数项，那么有多少行就得有多少个常数项。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>void insertionSort(int A[], int num)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">num</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>     <span class="c1">//c1</span>
</span><span class="line">    <span class="n">key</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>                <span class="c1">//c2</span>
</span><span class="line">    <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>                 <span class="c1">//c3</span>
</span><span class="line">    <span class="k">while</span><span class="p">(</span><span class="n">j</span><span class="o">&gt;</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&lt;</span><span class="n">key</span><span class="p">){</span>    <span class="c1">//c4</span>
</span><span class="line">        <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>         <span class="c1">//c5</span>
</span><span class="line">        <span class="n">j</span><span class="o">--</span><span class="p">;</span>                   <span class="c1">//c6</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">key</span><span class="p">;</span>              <span class="c1">//c8</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>设$T(n)$为插入排序的运行时间，每行所需时间$c_i$如上所示，另设每一次while循环执行的次数为$t_i$，也即根据$i$的数值而变化。</p>

<p>显然第1行for执行次数为$n$，但循环体内部代码只执行$n-1$次，因为条件判断会比循环体内部代码多执行1次以判断结束条件。所以，第2、3、8行都执行$n-1$次。第四行所需执行的总次数应该为$\sum_{i=2}^{n}t_i$。</p>

<p>和上面for循环同理，每当while执行了$t_i$次时，它的内部代码只执行了$t_i-1$次，所以第5、6行的总执行次数应该均为$\sum_{i=2}^{n}(t_i-1)$。</p>

<p>综上所述：</p>

<script type="math/tex; mode=display">
\begin{equation}
\begin{aligned}
T(n)=c_1n+c_2(n-1)+c_3(n-1)+c_4\sum_{i=2}^{n}t_i+c_5\sum_{i=2}^{n}(t_i-1)+c_6\sum_{i=2}^{n}(t_i-1)+c_8(n-1)
\end{aligned}
\end{equation}
</script>

<p>分析算法的时候是根据算法的输入数据量进行的分析，不过就算是同样的数据输入量，输入数据的不同仍旧会造成算法运行时间的天差地别。</p>

<p>就像这里的插入排序，一副已经洗好的从大到小排列的牌是所谓的Best Case，因为已经排好序了，每一次while循环都会在第一次条件判断时中断。所以第1、2、3、8行的执行时间不变，但是第5、6行根本就得不到执行，第4行将总共执行n-1次。</p>

<p>也就是：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{equation}
\begin{aligned}
T(n)&=c_1n+c_2(n-1)+c_3(n-1)+c_4(n-1)+c_8(n-1)\\
&=(c_1+c_2+c_3+c_4+c_8)n+(c_2+c_3+c_4+c_8)
\end{aligned}
\end{equation}
 %]]&gt;</script>

<p>显然这是个一次多项式，是一个线性方程，也把这时候的时间复杂度称为线性复杂度。</p>

<p>而一副从小到大排序的扑克对于这里的插入排序来说，就是一个噩梦了，Worst Case。</p>

<p>对于第4行来说，$t_i$正好等于$i$的值，执行总次数为$\sum_{i=2}^{n}i=\frac{n(n+1)}{2}-1$。</p>

<p>第5、6行的执行总次数为$\sum_{i=2}^{n}(i-1)=\frac{n(n-1)}{2}$。</p>

<p>所以：</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{equation}
\begin{aligned}
T(n)&=c_1n+c_2(n-1)+c_3(n-1)+c_4(\frac{n(n+1)}{2}-1)+c_5\frac{n(n-1)}{2}+c_6\frac{n(n-1)}{2}+c_8(n-1)\\
&=(\frac{c_4}{2}+\frac{c_5}{2}+\frac{c_6}{2})n^2+(c_1+c_2+c_3+\frac{c_4}{2}-\frac{c_5}{2}-\frac{c_6}{2}+c_8)n-(c_2+c_3+c_4+c_8)
\end{aligned}
\end{equation}
 %]]&gt;</script>

<p>嗯，挺长的一串的，其实也就是一个二次多项式而已，也把此时的时间复杂度称为平方复杂度。</p>

<p>因为无法预先确定输入数据的质量，所以一般在算法分析中给算法定出一个上限，采用worst case的分析方式。也就是不管输入数据怎么样变化，算法的运行时间总不会超过某个相应的量，只少不多。</p>

<p>Average case的分析方式个人感觉在实际应用中有一定优势，不过书上说这种分析方式比起worst case来说要麻烦太多了，而且对于某些特定问题来说一个”平均“的定义也不是特别的清晰。但是average case对于随机算法来说却是一个很好的分析方法，用概率的方法给出运行时间，比如快速排序算法。</p>

<p>因为比较两个算法时，像上面那样的具体分析往往是不必要的，所以一般用算法运行时间的增长率为标准判断算法优劣。前面插入排序的worst case运行时间就是$Θ(n^2)$。</p>

<p>–未完待续–</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CLRS - Ch2.1 - Insertion Sort]]></title>
    <link href="http://www.cyberluc29.tk/blog/2013/07/31/clrs-2-1-note/"/>
    <updated>2013-07-31T19:49:00+08:00</updated>
    <id>http://www.cyberluc29.tk/blog/2013/07/31/clrs-2-1-note</id>
    <content type="html"><![CDATA[<h3 id="insertion-sort---">1.Insertion Sort - 插入排序</h3>
<p>插入排序是非常基础的一类排序，它和平时玩扑克牌时摸牌的排序方法几乎一模一样。每当拿到一张牌，我们就从右向左（反向当然也行）依次查看手上的牌的大小，直到找到一张牌比摸到的牌大，就把摸到的牌放到这一张后面。反复摸牌，最后我们就得到了一副从大到小排列的牌。这也符合我个人的打牌习惯。</p>

<p>这个算法非常基础，CLRS本节中也已经对此讲的很清楚了，这里仅仅列出C语言实现。注意书中是从小到大进行的排列。</p>

<!--more-->

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Insertion Sort</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="c"><span class="line"><span class="kt">void</span> <span class="nf">insertionSort</span><span class="p">(</span><span class="kt">int</span> <span class="n">A</span><span class="p">[],</span> <span class="kt">int</span> <span class="n">num</span><span class="p">){</span>
</span><span class="line">    <span class="kt">int</span> <span class="n">i</span><span class="p">,</span> <span class="n">j</span><span class="p">,</span> <span class="n">key</span><span class="p">;</span>
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">num</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>  <span class="cm">/* 为了便于理解，这里设数组大小为num+1，数组从1开始计算下标 */</span>
</span><span class="line">        <span class="n">key</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class="line">        <span class="n">j</span> <span class="o">=</span> <span class="n">i</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
</span><span class="line">        <span class="k">while</span><span class="p">(</span><span class="n">j</span><span class="o">&gt;</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">&lt;</span><span class="n">key</span><span class="p">){</span>
</span><span class="line">            <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="p">];</span>      <span class="cm">/* 如果前一张牌比当前的牌大则交换两者 */</span>
</span><span class="line">            <span class="n">j</span><span class="o">--</span><span class="p">;</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">        <span class="n">A</span><span class="p">[</span><span class="n">j</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">key</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line"><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="loop-invariant---">2.Loop Invariant - 循环不变式</h3>
<p>有时候为了解决某个问题而设计了某个算法后，虽然直觉上觉得这个算法应该能用，而实际的运行也确实能够正确解决这个问题，不过这个算法到底为什么是正确的呢？严谨一点儿的话，就不能仅仅靠直觉来判断了，所以CLRS中引入了<strong>Loop Invariant</strong>的概念，从数学上对算法中循环的正确性进行证明。</p>

<p><strong>Loop Invariant</strong>是数学归纳法的一种变体，它和数学归纳法几乎完全相同，都是先证明一个初始条件为真，然后逐条递推，唯一的区别在于数学归纳法是将归纳步骤无限进行下去，证明了第n步再继续证明第n+1步，而Loop Invariant则是要在某一步停止，也就是当完成了循环的条件时。</p>

<p>书中列出了应用Loop Invariant的三个步骤：</p>

<blockquote>
  <p><strong>Initialization</strong>: It is true prior to the first iteration of the loop.</p>

  <p><strong>Maintenance</strong>: If it is true before an iteration of the loop, it remains true before the next iteration.</p>

  <p><strong>Termination</strong>: When the loop terminates, the invariant gives us a useful property that hepls show that the algorithm is correct.</p>
</blockquote>

<p>然后这里就用循环不变式对上面提到的Insertion Sort进行检验。</p>

<p><strong>Initializaton：</strong>首先，循环的初始条件是<code>i=2</code>，这个时候i指向数组中第2个元素，此时数组<code>A[1...i-1]</code>也就是<code>A[1]</code>仅包含1个元素，所以trivially，这一个元素的数组肯定是排好序的。</p>

<p><strong>Maintenance：</strong>接着，<code>i=2</code>，循环进行第一次iteration。在进行这次循环之前，算法肯定是已经正确排序了<code>A[1]</code>。而注意每次的循环都是从选定的位置开始向左遍历，依次把比它小的牌右移一位，直到找到自己合适的位置。所以第1次循环结束后，数组的前两个元素<code>A[1...2]</code>处于排好序的状态。以此递推，可知第i次循环开始前，<code>A[1...i-1]</code>处于排好序的状态，而当次循环结束以后，第i个数已经被放到了正确的位置，数组<code>A[1...i]</code>无疑包含了已经正确排序的数组，而<code>A[i+1...num]</code>仍旧处于未排序状态。</p>

<p><strong>Termination：</strong>最后就是循环结束了。当循环结束时<code>i=num+1</code>，此时<code>A[1...i-1]</code>就是<code>A[1...num]</code>，也就是整个数组，可知是处于排好序的状态。</p>

<p>至此，就用类似数学归纳法的Loop Invariant将完全由循环构成的Insertion Sort的算法正确性给证明了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试001]]></title>
    <link href="http://www.cyberluc29.tk/blog/2013/07/31/test001/"/>
    <updated>2013-07-31T12:52:00+08:00</updated>
    <id>http://www.cyberluc29.tk/blog/2013/07/31/test001</id>
    <content type="html"><![CDATA[<p>这是Octopress部分功能的测试</p>

<!--more-->

<p>This is some text.<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>. Other text.<sup id="fnref:footnote"><a href="#fn:footnote" rel="footnote">2</a></sup>.</p>

<pre><code>Here comes some code.
</code></pre>

<p>测试一下数学公式</p>

<p>$X<em>1, X</em>2, X_3$</p>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align*}
  & \phi(x,y) = \phi \left(\sum_{i=1}^n x_ie_i, \sum_{j=1}^n y_je_j \right)
  = \sum_{i=1}^n \sum_{j=1}^n x_i y_j \phi(e_i, e_j) = \\
  & (x_1, \ldots, x_n) \left( \begin{array}{ccc}
      \phi(e_1, e_1) & \cdots & \phi(e_1, e_n) \\
      \vdots & \ddots & \vdots \\
      \phi(e_n, e_1) & \cdots & \phi(e_n, e_n)
    \end{array} \right)
  \left( \begin{array}{c}
      y_1 \\
      \vdots \\
      y_n
    \end{array} \right)
\end{align*}
 %]]&gt;</script>

<script type="math/tex; mode=display">% &lt;![CDATA[

\begin{align}
\mbox{Union: } & A\cup B = \{x\mid x\in A \mbox{ or } x\in B\} \\
\mbox{Concatenation: } & A\circ B  = \{xy\mid x\in A \mbox{ and } y\in B\} \\
\mbox{Star: } & A^\star  = \{x_1x_2\ldots x_k \mid  k\geq 0 \mbox{ and each } x_i\in A\} \\
\end{align}
 %]]&gt;</script>

<p>段内插入LaTeX代码是这样的：$\exp(-\frac{x^2}{2})$，试试看看吧</p>
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>test<a href="#fnref:1" rel="reference">&#8617;</a></p>
    </li>
    <li id="fn:footnote">
      <p>必须被引用到才能实现上标<a href="#fnref:footnote" rel="reference">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Archlinux安装小记]]></title>
    <link href="http://www.cyberluc29.tk/blog/2013/07/31/archlinux-installation/"/>
    <updated>2013-07-31T10:07:00+08:00</updated>
    <id>http://www.cyberluc29.tk/blog/2013/07/31/archlinux-installation</id>
    <content type="html"><![CDATA[<p>不知不觉已经使用了Archlinux好几个月的时间了，期间也记录了一些安装使用中遇到的问题，最近又把arch重新装了一遍，这里把整理后的安装记录发上来。</p>

<p>Arch的安装过程是全命令行的，连Debian那样的字符模拟图形界面也不会提供，不过安装过程还是相当简单的。</p>

<!-- more -->

<p>我是从Debian下转到Archlinux，手头正好有一个不用的U盘，于是便按照ArchWiki的说明将U盘写入archlinux的iso镜像。用<code>syslinux</code>的那个方法我试了，但是记得没用，以后哪天再去研究一下吧。</p>

<p><code>lsblk</code>找到u盘的设备名，比如我的是<code>/dev/sdb</code></p>

<p>注意这个方法是会格式化u盘数据的！</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>写入USB </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># dd bs=4M if=/home/twtwtw/Downloads/archlinux-2013.07.01-dual.iso of=/dev/sdb</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后重启开始安装Archlinux。</p>

<h3 id="section">1.分区</h3>
<p>使用cfdisk可以很方便的给磁盘分区，我给arch划出了大约200个G，分别划分了/boot 200M，/ 90G，/home 140G，swap 8G。</p>

<h3 id="section-1">2.格式化</h3>
<p>对磁盘进行格式化，可以使用如下的命令，将其中的x替换为对应的磁盘符号</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>格式化 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># mkfs.ext4 /dev/sdx                 //格式化为ext4
</span><span class="line"># mkswap /dev/sdx &amp;&amp; swapon /dev/sdx //格式化swap并挂载</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-2">3.挂载</h3>
<p>接下来开始挂载分区，此时挂载分区一是为了正常安装系统，二是为了生成fstab，这个文件记录了磁盘挂载的信息，开机后按照文件内容会自动挂载。这里可以把Windos系统的NTFS分区也给挂载上，不过记得后面要装<code>ntfs-3g</code>，否则开机会报错。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>挂载 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># mount /dev/sdx /mnt &lt;!-- 测试 --&gt;
</span><span class="line"># mkdir /mnt/{boot,var,home}
</span><span class="line"># mount /dev/sd{9,10} /mnt/{boot,home}</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="pacman">4.调整网络，修改Pacman源</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>调整网络，修改Pacman源 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">// dhcpcd、wifi-menu、ifconfig、iwconfig均可使用，我直接连接路由，arch已经自动dhcp
</span><span class="line"># vi /etc/pacman.d/mirrorlist //找到其中的China标记的项，去掉注释</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这些是China的源加在网上找的一些据说不错的源:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>/etc/pacman.d/mirrorlist </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="d"><span class="line"><span class="n">Server</span> <span class="p">=</span> <span class="n">http</span><span class="p">:</span><span class="c1">//mirrors.163.com/archlinux/$repo/os/$arch</span>
</span><span class="line"><span class="n">Server</span> <span class="p">=</span> <span class="n">http</span><span class="p">:</span><span class="c1">//mirror.hust.edu.cn/archlinux/$repo/os/$arch</span>
</span><span class="line"><span class="n">Server</span> <span class="p">=</span> <span class="n">http</span><span class="p">:</span><span class="c1">//mirrors.ustc.edu.cn/archlinux/$repo/os/$arch</span>
</span><span class="line"><span class="n">Server</span> <span class="p">=</span> <span class="n">http</span><span class="p">:</span><span class="c1">//mirrors.stuhome.net/archlinux/$repo/os/$arch</span>
</span><span class="line"><span class="n">Server</span> <span class="p">=</span> <span class="n">http</span><span class="p">:</span><span class="c1">//mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch</span>
</span><span class="line"><span class="n">Server</span> <span class="p">=</span> <span class="n">http</span><span class="p">:</span><span class="c1">//mirrors.neusoft.edu.cn/archlinux/$repo/os/$arch</span>
</span><span class="line"><span class="n">Server</span> <span class="p">=</span> <span class="n">http</span><span class="p">:</span><span class="c1">//lug.mtu.edu/archlinux/$repo/os/$arch</span>
</span><span class="line"><span class="n">Server</span> <span class="p">=</span> <span class="n">http</span><span class="p">:</span><span class="c1">//mirror.umd.edu/archlinux/$repo/os/$arch</span>
</span><span class="line"><span class="n">Server</span> <span class="p">=</span> <span class="n">http</span><span class="p">:</span><span class="c1">//mirrors.liquidweb.com/archlinux/$repo/os/$arch</span>
</span><span class="line"><span class="n">Server</span> <span class="p">=</span> <span class="n">http</span><span class="p">:</span><span class="c1">//cosmos.cites.illinois.edu/pub/archlinux/$repo/os/$arch</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="grub-bios">5.安装系统基本组件和grub-bios</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>安装系统基本组件 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># pacstrap /mnt base base-devel grub-bios</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="fstab">6.生成fstab</h3>
<p><code>-p</code>这里表示生成以设备名为标识的fstab，比如/dev/sda等
<code>-U</code>标记可以生成UUID为标识的fstab</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>生成fstab </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c"># genfstab -p /mnt &gt;&gt; /mnt/etc/fstab</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后就等待慢慢下载安装吧。</p>

<h3 id="section-3">7.切换到安装好的系统</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>切换到安装好的系统 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># arch-chroot /mnt</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-4">8.设置主机名</h3>
<p>主机名写在文件<code>/etc/hostname</code>里边，写入就好。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>设置主机名 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># echo Cryo-Nyx &gt; /etc/hostname</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="locale">9.修改locale</h3>
<p>我想要系统仍旧以英文显示各种提示，所以这里仅仅修改<code>LC_CTYPE</code>为<code>zh_CN.UTF-8</code>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>修改locale </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># vi /etc/locale.conf    //添加LANG=en_US.UTF-8，LC_CTYPE=zh_CN.UTF-8
</span><span class="line"># vi /etc/locale.gen     //取消需要的locale前注释
</span><span class="line"># locale-gen</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-5">10.设置时区与硬件时钟</h3>
<p>这一步设置本地时区</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>设置本地时区 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># ln -s /usr/share/zoneinfo/Asia/Chongqing /etc/localtime
</span><span class="line"># hwclock --systohc --utc</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-6">11.设置键盘布局</h3>
<p>这一步可以在tty下进行键盘布局的设置，比如交换CapsLock和Escape，方便VIM操作</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>设置TTY下键盘布局 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># cd /usr/share/kbd/keymaps/i386/qwerty/
</span><span class="line"># cp us.map.gz twtwtw.map.gz
</span><span class="line"># gunzip twtwwt.map.gz
</span><span class="line"># vi twtwtw.map.gz
</span><span class="line">//找到CapsLock和Escape的键位，互换其值
</span><span class="line"># vi /etc/vconsole.conf  //添加`KEYMAP=twtwtw`</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="linux">12.创建引导linux内核的初始环境</h3>
<p><code>-p</code>是preset的意思，也就是以预设的linux配置文件生成。</p>

<p>如果是intel集显的话，可以在<code>/etc/mkinitcpio.conf</code>的<code>MODULE</code>里边添加<code>i915</code>打开KMS。</p>

<p>详情参照这里<a href="https://wiki.archlinux.org/index.php/Intel_Graphics">ArchWiki: Intel Grapchis</a>。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>创建引导linux内核的初始环境 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># vi /etc/mkinitcpio.conf //在MODULES里添加i915
</span><span class="line"># mkinitcpio -p linux</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="grubdevsda">13.安装grub到/dev/sda上并生成初始配置</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>安装grub </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># grub-install /dev/sda  //将grub安装到sda上
</span><span class="line"># cp /usr/share/locale/en\@quot\LC_MESSAGES /boot/grub/locale/en.mo //不然开机加载grub时会提示en.mo not found
</span><span class="line"># pacman -S os-prober    //如果还装有Win系统的话
</span><span class="line"># grub-mkconfig -o /boot/grub/grub.cfg</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-7">14.添加用户</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>添加用户 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">#useradd -d /home/twtwtw -m twtwtw
</span><span class="line">#usermod -G audio,video,wheel,users,games,optical,storage,lp twtwtw //将用户添加到xxxx各个组</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-8">14.修改初始密码</h3>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>修改初始密码 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># passwd //修改root密码
</span><span class="line"># passwd twtwtw //修改用户密码</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="section-9">15.安装基本系统软件</h2>
<p>安装系统一些基本的软件，这些base包并没有提供。</p>

<p>Archlinux使用ip和netctl工具来进行网络管理，不过以前用惯了ifconfig，这里也一起装上吧。</p>

<p><code>net-tools</code>提供了<code>ifconfig</code>工具
<code>wireless_tools</code>提供了<code>iwconfig</code>和<code>iwlist</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>安装基本系统软件 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># pacman -S sudo gksu vim net-tools wireless_tools  dialog wpa_supplicant dhcpcd ntfs-3</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然后visudo，把自己的用户加上管理员权限</p>

<h3 id="section-10">15.安装桌面环境</h3>
<p>我使用的是<code>Awesome</code>这款wm，并没有使用dm。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>安装桌面环境 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># pacman -S xorg-{server,server-utils,utils,xinit} xterm xf86-video-intel mesa alsa-utils feh awesome vicious xcompmgr</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-11">16.安装完成</h3>
<p>安装完成，重启进入系统。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>安装完成 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># exit
</span><span class="line"># umount -a
</span><span class="line"># reboot</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="xinitrc">17.xinitrc</h3>
<p>修改<code>.xinitrc</code>，添加<code>exec awesome</code></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>我的.xinitrc</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="bash"><span class="line"><span class="c">#!/bin/zsh</span>
</span><span class="line">numlockx
</span><span class="line">xbacklight -set 0
</span><span class="line"><span class="c">#setxkbmap -option ctrl:nocaps</span>
</span><span class="line"><span class="nb">exec </span>awesome
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-12">关于字体</h3>
<p>有几个字体是必下，比如community里的<code>wqy-microhei</code>，<code>wqy-zenhei</code>，还有aur里的<code>ttf-dejavusans-yuanti</code>，以及<code>ttf-droid-sans</code>,<code>ttf-microsoft-yahei</code>也可以装上，都是很不错的字体。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>字体 </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line"># pacman -S xorg-font-{util,utils,100dpi,75dpi,alias}</span></code></pre></td></tr></table></div></figure></notextile></div>

<h3 id="section-13">常用软件</h3>
<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>常用软件</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
</pre></td><td class="code"><pre><code class="text"><span class="line">firefox                    //不解释
</span><span class="line">rdesktop                   //远程桌面
</span><span class="line">banshee                    //听歌还不错，不过ncmpcpp作为字符下的也还可以
</span><span class="line">mplayer
</span><span class="line">smplayer
</span><span class="line">chmsee
</span><span class="line">foxitreader                //比evince好用
</span><span class="line">eof,gthumb                 //不错的看图软件
</span><span class="line">bc                         //命令行下的计算器
</span><span class="line">emacs
</span><span class="line">xbacklight    //可以设置笔记本的亮度，对于无法保存亮度的笔记本来说很方便
</span><span class="line">numlockx      //自动打开小键盘
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>已经安装了好久了，当时也没记录多详细，就这些内容了。</p>

<p>系统配置上的问题，以后想起来了再发吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://www.cyberluc29.tk/blog/2013/07/29/hello-world/"/>
    <updated>2013-07-29T20:12:00+08:00</updated>
    <id>http://www.cyberluc29.tk/blog/2013/07/29/hello-world</id>
    <content type="html"><![CDATA[<p>Hello World!</p>

<p>好吧，这是我用Octopress在Github上搭建好博客的第一篇文章。</p>

<p>作为一名技术宅和未来的IT从业人员，怎么能没有自己的技术博客呢。</p>

<p>这个博客将会记录我在学习、生活中所遇到的一些事，主要是作为一种记录，方便以后查询，也算是一种知识管理吧。</p>

<p>希望这次可以把这个博客给坚持写下去。XD</p>
]]></content>
  </entry>
  
</feed>
